/* automatically generated by rust-bindgen */

pub const BX_ARCH_32BIT: ::std::os::raw::c_uint = 0;
pub const BX_ARCH_64BIT: ::std::os::raw::c_uint = 0;
pub const BX_COMPILER_CLANG: ::std::os::raw::c_uint = 0;
pub const BX_COMPILER_CLANG_ANALYZER: ::std::os::raw::c_uint = 0;
pub const BX_COMPILER_GCC: ::std::os::raw::c_uint = 0;
pub const BX_COMPILER_MSVC: ::std::os::raw::c_uint = 0;
pub const BX_CPU_ENDIAN_BIG: ::std::os::raw::c_uint = 0;
pub const BX_CPU_ENDIAN_LITTLE: ::std::os::raw::c_uint = 0;
pub const BX_CPU_ARM: ::std::os::raw::c_uint = 0;
pub const BX_CPU_JIT: ::std::os::raw::c_uint = 0;
pub const BX_CPU_MIPS: ::std::os::raw::c_uint = 0;
pub const BX_CPU_PPC: ::std::os::raw::c_uint = 0;
pub const BX_CPU_RISCV: ::std::os::raw::c_uint = 0;
pub const BX_CPU_X86: ::std::os::raw::c_uint = 0;
pub const BX_CRT_BIONIC: ::std::os::raw::c_uint = 0;
pub const BX_CRT_GLIBC: ::std::os::raw::c_uint = 0;
pub const BX_CRT_LIBCXX: ::std::os::raw::c_uint = 0;
pub const BX_CRT_MINGW: ::std::os::raw::c_uint = 0;
pub const BX_CRT_MSVC: ::std::os::raw::c_uint = 0;
pub const BX_CRT_NEWLIB: ::std::os::raw::c_uint = 0;
pub const BX_CRT_MUSL: ::std::os::raw::c_uint = 0;
pub const BX_CRT_NONE: ::std::os::raw::c_uint = 0;
pub const BX_PLATFORM_ANDROID: ::std::os::raw::c_uint = 0;
pub const BX_PLATFORM_EMSCRIPTEN: ::std::os::raw::c_uint = 0;
pub const BX_PLATFORM_BSD: ::std::os::raw::c_uint = 0;
pub const BX_PLATFORM_HURD: ::std::os::raw::c_uint = 0;
pub const BX_PLATFORM_IOS: ::std::os::raw::c_uint = 0;
pub const BX_PLATFORM_LINUX: ::std::os::raw::c_uint = 0;
pub const BX_PLATFORM_NACL: ::std::os::raw::c_uint = 0;
pub const BX_PLATFORM_OSX: ::std::os::raw::c_uint = 0;
pub const BX_PLATFORM_PS4: ::std::os::raw::c_uint = 0;
pub const BX_PLATFORM_QNX: ::std::os::raw::c_uint = 0;
pub const BX_PLATFORM_RPI: ::std::os::raw::c_uint = 0;
pub const BX_PLATFORM_STEAMLINK: ::std::os::raw::c_uint = 0;
pub const BX_PLATFORM_WINDOWS: ::std::os::raw::c_uint = 0;
pub const BX_PLATFORM_WINRT: ::std::os::raw::c_uint = 0;
pub const BX_PLATFORM_XBOX360: ::std::os::raw::c_uint = 0;
pub const BX_PLATFORM_XBOXONE: ::std::os::raw::c_uint = 0;
pub const BX_CACHE_LINE_SIZE: ::std::os::raw::c_uint = 64;
pub const WINAPI_FAMILY_PC_APP: ::std::os::raw::c_uint = 2;
pub const WINAPI_FAMILY_PHONE_APP: ::std::os::raw::c_uint = 3;
pub const WINAPI_FAMILY_SYSTEM: ::std::os::raw::c_uint = 4;
pub const WINAPI_FAMILY_SERVER: ::std::os::raw::c_uint = 5;
pub const WINAPI_FAMILY_DESKTOP_APP: ::std::os::raw::c_uint = 100;
pub const WINAPI_FAMILY_APP: ::std::os::raw::c_uint = 2;
pub const WINAPI_FAMILY: ::std::os::raw::c_uint = 100;
pub const WINVER: ::std::os::raw::c_uint = 1537;
pub const _WIN32_WINNT: ::std::os::raw::c_uint = 1537;
pub const BX_PLATFORM_NAME: &'static [u8; 8usize] = b"Windows\x00";
pub const BX_CPU_NAME: &'static [u8; 4usize] = b"x86\x00";
pub const BX_CRT_NAME: &'static [u8; 15usize] = b"MSVC C Runtime\x00";
pub const BX_ARCH_NAME: &'static [u8; 7usize] = b"64-bit\x00";
pub const _SAL_VERSION: ::std::os::raw::c_uint = 20;
pub const __SAL_H_VERSION: ::std::os::raw::c_uint = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: ::std::os::raw::c_uint = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: ::std::os::raw::c_uint = 0;
pub const _CRT_PACKING: ::std::os::raw::c_uint = 8;
pub const _HAS_EXCEPTIONS: ::std::os::raw::c_uint = 1;
pub const __bool_true_false_are_defined: ::std::os::raw::c_uint = 1;
pub const false_: ::std::os::raw::c_uint = 0;
pub const true_: ::std::os::raw::c_uint = 1;
pub const WCHAR_MIN: ::std::os::raw::c_uint = 0;
pub const WCHAR_MAX: ::std::os::raw::c_uint = 65535;
pub const WINT_MIN: ::std::os::raw::c_uint = 0;
pub const WINT_MAX: ::std::os::raw::c_uint = 65535;
pub const _ARGMAX: ::std::os::raw::c_uint = 100;
pub const _CRT_INT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: ::std::os::raw::c_uint = 1;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: ::std::os::raw::c_uint
          =
    0;
pub const _CRT_BUILD_DESKTOP_APP: ::std::os::raw::c_uint = 1;
pub const __STDC_SECURE_LIB__: ::std::os::raw::c_uint = 200411;
pub const __GOT_SECURE_LIB__: ::std::os::raw::c_uint = 200411;
pub const __STDC_WANT_SECURE_LIB__: ::std::os::raw::c_uint = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: ::std::os::raw::c_uint = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: ::std::os::raw::c_uint = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT:
          ::std::os::raw::c_uint =
    0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: ::std::os::raw::c_uint = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY:
          ::std::os::raw::c_uint =
    0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: ::std::os::raw::c_uint
          =
    0;
pub const _MAX_ITOSTR_BASE16_COUNT: ::std::os::raw::c_uint = 9;
pub const _MAX_ITOSTR_BASE10_COUNT: ::std::os::raw::c_uint = 12;
pub const _MAX_ITOSTR_BASE8_COUNT: ::std::os::raw::c_uint = 12;
pub const _MAX_ITOSTR_BASE2_COUNT: ::std::os::raw::c_uint = 33;
pub const _MAX_LTOSTR_BASE16_COUNT: ::std::os::raw::c_uint = 9;
pub const _MAX_LTOSTR_BASE10_COUNT: ::std::os::raw::c_uint = 12;
pub const _MAX_LTOSTR_BASE8_COUNT: ::std::os::raw::c_uint = 12;
pub const _MAX_LTOSTR_BASE2_COUNT: ::std::os::raw::c_uint = 33;
pub const _MAX_ULTOSTR_BASE16_COUNT: ::std::os::raw::c_uint = 9;
pub const _MAX_ULTOSTR_BASE10_COUNT: ::std::os::raw::c_uint = 11;
pub const _MAX_ULTOSTR_BASE8_COUNT: ::std::os::raw::c_uint = 12;
pub const _MAX_ULTOSTR_BASE2_COUNT: ::std::os::raw::c_uint = 33;
pub const _MAX_I64TOSTR_BASE16_COUNT: ::std::os::raw::c_uint = 17;
pub const _MAX_I64TOSTR_BASE10_COUNT: ::std::os::raw::c_uint = 21;
pub const _MAX_I64TOSTR_BASE8_COUNT: ::std::os::raw::c_uint = 23;
pub const _MAX_I64TOSTR_BASE2_COUNT: ::std::os::raw::c_uint = 65;
pub const _MAX_U64TOSTR_BASE16_COUNT: ::std::os::raw::c_uint = 17;
pub const _MAX_U64TOSTR_BASE10_COUNT: ::std::os::raw::c_uint = 21;
pub const _MAX_U64TOSTR_BASE8_COUNT: ::std::os::raw::c_uint = 23;
pub const _MAX_U64TOSTR_BASE2_COUNT: ::std::os::raw::c_uint = 65;
pub const CHAR_BIT: ::std::os::raw::c_uint = 8;
pub const SCHAR_MIN: ::std::os::raw::c_int = -128;
pub const SCHAR_MAX: ::std::os::raw::c_uint = 127;
pub const UCHAR_MAX: ::std::os::raw::c_uint = 255;
pub const CHAR_MIN: ::std::os::raw::c_int = -128;
pub const CHAR_MAX: ::std::os::raw::c_uint = 127;
pub const MB_LEN_MAX: ::std::os::raw::c_uint = 5;
pub const SHRT_MIN: ::std::os::raw::c_int = -32768;
pub const SHRT_MAX: ::std::os::raw::c_uint = 32767;
pub const USHRT_MAX: ::std::os::raw::c_uint = 65535;
pub const INT_MIN: ::std::os::raw::c_int = -2147483648;
pub const INT_MAX: ::std::os::raw::c_uint = 2147483647;
pub const UINT_MAX: ::std::os::raw::c_uint = 4294967295;
pub const LONG_MIN: ::std::os::raw::c_int = -2147483648;
pub const LONG_MAX: ::std::os::raw::c_uint = 2147483647;
pub const ULONG_MAX: ::std::os::raw::c_uint = 4294967295;
pub const EXIT_SUCCESS: ::std::os::raw::c_uint = 0;
pub const EXIT_FAILURE: ::std::os::raw::c_uint = 1;
pub const _WRITE_ABORT_MSG: ::std::os::raw::c_uint = 1;
pub const _CALL_REPORTFAULT: ::std::os::raw::c_uint = 2;
pub const _OUT_TO_DEFAULT: ::std::os::raw::c_uint = 0;
pub const _OUT_TO_STDERR: ::std::os::raw::c_uint = 1;
pub const _OUT_TO_MSGBOX: ::std::os::raw::c_uint = 2;
pub const _REPORT_ERRMODE: ::std::os::raw::c_uint = 3;
pub const RAND_MAX: ::std::os::raw::c_uint = 32767;
pub const _CVTBUFSIZE: ::std::os::raw::c_uint = 349;
pub const _MAX_PATH: ::std::os::raw::c_uint = 260;
pub const _MAX_DRIVE: ::std::os::raw::c_uint = 3;
pub const _MAX_DIR: ::std::os::raw::c_uint = 256;
pub const _MAX_FNAME: ::std::os::raw::c_uint = 256;
pub const _MAX_EXT: ::std::os::raw::c_uint = 256;
pub const _MAX_ENV: ::std::os::raw::c_uint = 32767;
pub const BGFX_SHARED_LIB_BUILD: ::std::os::raw::c_uint = 0;
pub const BGFX_SHARED_LIB_USE: ::std::os::raw::c_uint = 0;
pub const BGFX_STATE_DEPTH_TEST_SHIFT: ::std::os::raw::c_uint = 4;
pub const BGFX_STATE_BLEND_SHIFT: ::std::os::raw::c_uint = 12;
pub const BGFX_STATE_BLEND_EQUATION_SHIFT: ::std::os::raw::c_uint = 28;
pub const BGFX_STATE_CULL_SHIFT: ::std::os::raw::c_uint = 36;
pub const BGFX_STATE_ALPHA_REF_SHIFT: ::std::os::raw::c_uint = 40;
pub const BGFX_STATE_PT_SHIFT: ::std::os::raw::c_uint = 48;
pub const BGFX_STATE_POINT_SIZE_SHIFT: ::std::os::raw::c_uint = 52;
pub const BGFX_STATE_RESERVED_SHIFT: ::std::os::raw::c_uint = 61;
pub const BGFX_STENCIL_FUNC_REF_SHIFT: ::std::os::raw::c_uint = 0;
pub const BGFX_STENCIL_FUNC_RMASK_SHIFT: ::std::os::raw::c_uint = 8;
pub const BGFX_STENCIL_TEST_SHIFT: ::std::os::raw::c_uint = 16;
pub const BGFX_STENCIL_OP_FAIL_S_SHIFT: ::std::os::raw::c_uint = 20;
pub const BGFX_STENCIL_OP_FAIL_Z_SHIFT: ::std::os::raw::c_uint = 24;
pub const BGFX_STENCIL_OP_PASS_Z_SHIFT: ::std::os::raw::c_uint = 28;
pub const BGFX_BUFFER_COMPUTE_FORMAT_SHIFT: ::std::os::raw::c_uint = 0;
pub const BGFX_BUFFER_COMPUTE_TYPE_SHIFT: ::std::os::raw::c_uint = 4;
pub const BGFX_TEXTURE_U_SHIFT: ::std::os::raw::c_uint = 0;
pub const BGFX_TEXTURE_V_SHIFT: ::std::os::raw::c_uint = 2;
pub const BGFX_TEXTURE_W_SHIFT: ::std::os::raw::c_uint = 4;
pub const BGFX_TEXTURE_MIN_SHIFT: ::std::os::raw::c_uint = 6;
pub const BGFX_TEXTURE_MAG_SHIFT: ::std::os::raw::c_uint = 8;
pub const BGFX_TEXTURE_MIP_SHIFT: ::std::os::raw::c_uint = 10;
pub const BGFX_TEXTURE_RT_MSAA_SHIFT: ::std::os::raw::c_uint = 12;
pub const BGFX_TEXTURE_COMPARE_SHIFT: ::std::os::raw::c_uint = 16;
pub const BGFX_TEXTURE_BORDER_COLOR_SHIFT: ::std::os::raw::c_uint = 24;
pub const BGFX_TEXTURE_RESERVED_SHIFT: ::std::os::raw::c_uint = 28;
pub const BGFX_RESET_FULLSCREEN_SHIFT: ::std::os::raw::c_uint = 0;
pub const BGFX_RESET_MSAA_SHIFT: ::std::os::raw::c_uint = 4;
pub const BGFX_RESET_RESERVED_SHIFT: ::std::os::raw::c_uint = 31;
pub const BGFX_SUBMIT_RESERVED_SHIFT: ::std::os::raw::c_uint = 7;
pub type va_list = *mut ::std::os::raw::c_char;
extern "C" {
    pub fn __va_start(arg1: *mut va_list, ...);
}
pub type __vcrt_bool = bool;
pub type wchar_t = ::std::os::raw::c_ushort;
extern "C" {
    pub fn __security_init_cookie();
}
extern "C" {
    pub fn __security_check_cookie(_StackCookie: usize);
}
extern "C" {
    pub fn __report_gsfailure(_StackCookie: usize);
}
extern "C" {
    #[link_name = "__security_cookie"]
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_longlong;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulonglong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = ::std::os::raw::c_longlong;
pub type uintmax_t = ::std::os::raw::c_ulonglong;
pub type __crt_bool = bool;
extern "C" {
    pub fn _invalid_parameter_noinfo();
}
extern "C" {
    pub fn _invalid_parameter_noinfo_noreturn();
}
extern "C" {
    pub fn _invoke_watson(arg1: *const wchar_t, arg2: *const wchar_t,
                          arg3: *const wchar_t, arg4: ::std::os::raw::c_uint,
                          arg5: usize);
}
pub type errno_t = ::std::os::raw::c_int;
pub type wint_t = ::std::os::raw::c_ushort;
pub type wctype_t = ::std::os::raw::c_ushort;
pub type __time32_t = ::std::os::raw::c_long;
pub type __time64_t = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::std::os::raw::c_ushort,
    pub _locale_mb_cur_max: ::std::os::raw::c_int,
    pub _locale_lc_codepage: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___crt_locale_data_public() {
    assert_eq!(::std::mem::size_of::<__crt_locale_data_public>() , 16usize ,
               concat ! (
               "Size of: " , stringify ! ( __crt_locale_data_public ) ));
    assert_eq! (::std::mem::align_of::<__crt_locale_data_public>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __crt_locale_data_public ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __crt_locale_data_public ) ) .
                _locale_pctype as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __crt_locale_data_public ) , "::" , stringify ! (
                _locale_pctype ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __crt_locale_data_public ) ) .
                _locale_mb_cur_max as * const _ as usize } , 8usize , concat !
                (
                "Alignment of field: " , stringify ! (
                __crt_locale_data_public ) , "::" , stringify ! (
                _locale_mb_cur_max ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __crt_locale_data_public ) ) .
                _locale_lc_codepage as * const _ as usize } , 12usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                __crt_locale_data_public ) , "::" , stringify ! (
                _locale_lc_codepage ) ));
}
impl Clone for __crt_locale_data_public {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
#[test]
fn bindgen_test_layout___crt_locale_pointers() {
    assert_eq!(::std::mem::size_of::<__crt_locale_pointers>() , 16usize ,
               concat ! ( "Size of: " , stringify ! ( __crt_locale_pointers )
               ));
    assert_eq! (::std::mem::align_of::<__crt_locale_pointers>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __crt_locale_pointers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __crt_locale_pointers ) ) . locinfo as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __crt_locale_pointers )
                , "::" , stringify ! ( locinfo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __crt_locale_pointers ) ) . mbcinfo as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __crt_locale_pointers )
                , "::" , stringify ! ( mbcinfo ) ));
}
impl Clone for __crt_locale_pointers {
    fn clone(&self) -> Self { *self }
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _Mbstatet {
    pub _Wchar: ::std::os::raw::c_ulong,
    pub _Byte: ::std::os::raw::c_ushort,
    pub _State: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout__Mbstatet() {
    assert_eq!(::std::mem::size_of::<_Mbstatet>() , 8usize , concat ! (
               "Size of: " , stringify ! ( _Mbstatet ) ));
    assert_eq! (::std::mem::align_of::<_Mbstatet>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _Mbstatet ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _Mbstatet ) ) . _Wchar as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _Mbstatet ) , "::" ,
                stringify ! ( _Wchar ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _Mbstatet ) ) . _Byte as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _Mbstatet ) , "::" ,
                stringify ! ( _Byte ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _Mbstatet ) ) . _State as * const _ as
                usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( _Mbstatet ) , "::" ,
                stringify ! ( _State ) ));
}
impl Clone for _Mbstatet {
    fn clone(&self) -> Self { *self }
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
extern "C" {
    pub fn _calloc_base(_Count: usize, _Size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(_Count: usize, _Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _callnewh(_Size: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _expand(_Block: *mut ::std::os::raw::c_void, _Size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _free_base(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _malloc_base(_Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(_Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _msize_base(_Block: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn _msize(_Block: *mut ::std::os::raw::c_void) -> usize;
}
extern "C" {
    pub fn _realloc_base(_Block: *mut ::std::os::raw::c_void, _Size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(_Block: *mut ::std::os::raw::c_void, _Size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc_base(_Block: *mut ::std::os::raw::c_void, _Count: usize,
                          _Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _recalloc(_Block: *mut ::std::os::raw::c_void, _Count: usize,
                     _Size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_free(_Block: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _aligned_malloc(_Size: usize, _Alignment: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_malloc(_Size: usize, _Alignment: usize,
                                  _Offset: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_msize(_Block: *mut ::std::os::raw::c_void,
                          _Alignment: usize, _Offset: usize) -> usize;
}
extern "C" {
    pub fn _aligned_offset_realloc(_Block: *mut ::std::os::raw::c_void,
                                   _Size: usize, _Alignment: usize,
                                   _Offset: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_offset_recalloc(_Block: *mut ::std::os::raw::c_void,
                                    _Count: usize, _Size: usize,
                                    _Alignment: usize, _Offset: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_realloc(_Block: *mut ::std::os::raw::c_void, _Size: usize,
                            _Alignment: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _aligned_recalloc(_Block: *mut ::std::os::raw::c_void,
                             _Count: usize, _Size: usize, _Alignment: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _errno() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _set_errno(_Value: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_errno(_Value: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn __threadid() -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn __threadhandle() -> usize;
}
extern "C" {
    pub fn bsearch_s(_Key: *const ::std::os::raw::c_void,
                     _Base: *const ::std::os::raw::c_void,
                     _NumOfElements: rsize_t, _SizeOfElements: rsize_t,
                     _PtFuncCompare:
                         ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                        *mut ::std::os::raw::c_void,
                                                                    arg2:
                                                                        *const ::std::os::raw::c_void,
                                                                    arg3:
                                                                        *const ::std::os::raw::c_void)
                                                   -> ::std::os::raw::c_int>,
                     _Context: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort_s(_Base: *mut ::std::os::raw::c_void,
                   _NumOfElements: rsize_t, _SizeOfElements: rsize_t,
                   _PtFuncCompare:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *mut ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg3:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>,
                   _Context: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn bsearch(_Key: *const ::std::os::raw::c_void,
                   _Base: *const ::std::os::raw::c_void,
                   _NumOfElements: usize, _SizeOfElements: usize,
                   _PtFuncCompare:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(_Base: *mut ::std::os::raw::c_void, _NumOfElements: usize,
                 _SizeOfElements: usize,
                 _PtFuncCompare:
                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *const ::std::os::raw::c_void,
                                                                arg2:
                                                                    *const ::std::os::raw::c_void)
                                               -> ::std::os::raw::c_int>);
}
extern "C" {
    pub fn _lfind_s(_Key: *const ::std::os::raw::c_void,
                    _Base: *const ::std::os::raw::c_void,
                    _NumOfElements: *mut ::std::os::raw::c_uint,
                    _SizeOfElements: usize,
                    _PtFuncCompare:
                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *mut ::std::os::raw::c_void,
                                                                   arg2:
                                                                       *const ::std::os::raw::c_void,
                                                                   arg3:
                                                                       *const ::std::os::raw::c_void)
                                                  -> ::std::os::raw::c_int>,
                    _Context: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lfind(_Key: *const ::std::os::raw::c_void,
                  _Base: *const ::std::os::raw::c_void,
                  _NumOfElements: *mut ::std::os::raw::c_uint,
                  _SizeOfElements: ::std::os::raw::c_uint,
                  _PtFuncCompare:
                      ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                     *const ::std::os::raw::c_void,
                                                                 arg2:
                                                                     *const ::std::os::raw::c_void)
                                                -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch_s(_Key: *const ::std::os::raw::c_void,
                      _Base: *mut ::std::os::raw::c_void,
                      _NumOfElements: *mut ::std::os::raw::c_uint,
                      _SizeOfElements: usize,
                      _PtFuncCompare:
                          ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                         *mut ::std::os::raw::c_void,
                                                                     arg2:
                                                                         *const ::std::os::raw::c_void,
                                                                     arg3:
                                                                         *const ::std::os::raw::c_void)
                                                    -> ::std::os::raw::c_int>,
                      _Context: *mut ::std::os::raw::c_void)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _lsearch(_Key: *const ::std::os::raw::c_void,
                    _Base: *mut ::std::os::raw::c_void,
                    _NumOfElements: *mut ::std::os::raw::c_uint,
                    _SizeOfElements: ::std::os::raw::c_uint,
                    _PtFuncCompare:
                        ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                       *const ::std::os::raw::c_void,
                                                                   arg2:
                                                                       *const ::std::os::raw::c_void)
                                                  -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lfind(_Key: *const ::std::os::raw::c_void,
                 _Base: *const ::std::os::raw::c_void,
                 _NumOfElements: *mut ::std::os::raw::c_uint,
                 _SizeOfElements: ::std::os::raw::c_uint,
                 _PtFuncCompare:
                     ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                    *const ::std::os::raw::c_void,
                                                                arg2:
                                                                    *const ::std::os::raw::c_void)
                                               -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn lsearch(_Key: *const ::std::os::raw::c_void,
                   _Base: *mut ::std::os::raw::c_void,
                   _NumOfElements: *mut ::std::os::raw::c_uint,
                   _SizeOfElements: ::std::os::raw::c_uint,
                   _PtFuncCompare:
                       ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                      *const ::std::os::raw::c_void,
                                                                  arg2:
                                                                      *const ::std::os::raw::c_void)
                                                 -> ::std::os::raw::c_int>)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn _itow_s(_Value: ::std::os::raw::c_int, _Buffer: *mut wchar_t,
                   _BufferCount: usize, _Radix: ::std::os::raw::c_int)
     -> errno_t;
}
extern "C" {
    pub fn _itow(_Value: ::std::os::raw::c_int, _Buffer: *mut wchar_t,
                 _Radix: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _ltow_s(_Value: ::std::os::raw::c_long, _Buffer: *mut wchar_t,
                   _BufferCount: usize, _Radix: ::std::os::raw::c_int)
     -> errno_t;
}
extern "C" {
    pub fn _ltow(_Value: ::std::os::raw::c_long, _Buffer: *mut wchar_t,
                 _Radix: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _ultow_s(_Value: ::std::os::raw::c_ulong, _Buffer: *mut wchar_t,
                    _BufferCount: usize, _Radix: ::std::os::raw::c_int)
     -> errno_t;
}
extern "C" {
    pub fn _ultow(_Value: ::std::os::raw::c_ulong, _Buffer: *mut wchar_t,
                  _Radix: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstod(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f64;
}
extern "C" {
    pub fn _wcstod_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                     _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn wcstol(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                  _Radix: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wcstol_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                     _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoll(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                   _Radix: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoll_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                      _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoul(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                   _Radix: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _wcstoul_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                      _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcstoull(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                    _Radix: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoull_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                       _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstold(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t)
     -> f64;
}
extern "C" {
    pub fn _wcstold_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                      _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn wcstof(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t) -> f32;
}
extern "C" {
    pub fn _wcstof_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                     _Locale: _locale_t) -> f32;
}
extern "C" {
    pub fn _wtof(_String: *const wchar_t) -> f64;
}
extern "C" {
    pub fn _wtof_l(_String: *const wchar_t, _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn _wtoi(_String: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtoi_l(_String: *const wchar_t, _Locale: _locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wtol(_String: *const wchar_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtol_l(_String: *const wchar_t, _Locale: _locale_t)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _wtoll(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoll_l(_String: *const wchar_t, _Locale: _locale_t)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _i64tow_s(_Value: ::std::os::raw::c_longlong,
                     _Buffer: *mut wchar_t, _BufferCount: usize,
                     _Radix: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _i64tow(_Value: ::std::os::raw::c_longlong, _Buffer: *mut wchar_t,
                   _Radix: ::std::os::raw::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _ui64tow_s(_Value: ::std::os::raw::c_ulonglong,
                      _Buffer: *mut wchar_t, _BufferCount: usize,
                      _Radix: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _ui64tow(_Value: ::std::os::raw::c_ulonglong,
                    _Buffer: *mut wchar_t, _Radix: ::std::os::raw::c_int)
     -> *mut wchar_t;
}
extern "C" {
    pub fn _wtoi64(_String: *const wchar_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wtoi64_l(_String: *const wchar_t, _Locale: _locale_t)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                     _Radix: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoi64_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                       _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _wcstoui64(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                      _Radix: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wcstoui64_l(_String: *const wchar_t, _EndPtr: *mut *mut wchar_t,
                        _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _wfullpath(_Buffer: *mut wchar_t, _Path: *const wchar_t,
                      _BufferCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn _wmakepath_s(_Buffer: *mut wchar_t, _BufferCount: usize,
                        _Drive: *const wchar_t, _Dir: *const wchar_t,
                        _Filename: *const wchar_t, _Ext: *const wchar_t)
     -> errno_t;
}
extern "C" {
    pub fn _wmakepath(_Buffer: *mut wchar_t, _Drive: *const wchar_t,
                      _Dir: *const wchar_t, _Filename: *const wchar_t,
                      _Ext: *const wchar_t);
}
extern "C" {
    pub fn _wperror(_ErrorMessage: *const wchar_t);
}
extern "C" {
    pub fn _wsplitpath(_FullPath: *const wchar_t, _Drive: *mut wchar_t,
                       _Dir: *mut wchar_t, _Filename: *mut wchar_t,
                       _Ext: *mut wchar_t);
}
extern "C" {
    pub fn _wsplitpath_s(_FullPath: *const wchar_t, _Drive: *mut wchar_t,
                         _DriveCount: usize, _Dir: *mut wchar_t,
                         _DirCount: usize, _Filename: *mut wchar_t,
                         _FilenameCount: usize, _Ext: *mut wchar_t,
                         _ExtCount: usize) -> errno_t;
}
extern "C" {
    pub fn _wdupenv_s(_Buffer: *mut *mut wchar_t, _BufferCount: *mut usize,
                      _VarName: *const wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wgetenv(_VarName: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wgetenv_s(_RequiredCount: *mut usize, _Buffer: *mut wchar_t,
                      _BufferCount: usize, _VarName: *const wchar_t)
     -> errno_t;
}
extern "C" {
    pub fn _wputenv(_EnvString: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wputenv_s(_Name: *const wchar_t, _Value: *const wchar_t)
     -> errno_t;
}
extern "C" {
    pub fn _wsearchenv_s(_Filename: *const wchar_t, _VarName: *const wchar_t,
                         _Buffer: *mut wchar_t, _BufferCount: usize)
     -> errno_t;
}
extern "C" {
    pub fn _wsearchenv(_Filename: *const wchar_t, _VarName: *const wchar_t,
                       _ResultPath: *mut wchar_t);
}
extern "C" {
    pub fn _wsystem(_Command: *const wchar_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _swab(_Buf1: *mut ::std::os::raw::c_char,
                 _Buf2: *mut ::std::os::raw::c_char,
                 _SizeInBytes: ::std::os::raw::c_int);
}
extern "C" {
    pub fn exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(_Code: ::std::os::raw::c_int);
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn _set_abort_behavior(_Flags: ::std::os::raw::c_uint,
                               _Mask: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_uint;
}
pub type _onexit_t =
    ::std::option::Option<unsafe extern "C" fn() -> ::std::os::raw::c_int>;
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _onexit(_Func: _onexit_t) -> _onexit_t;
}
extern "C" {
    pub fn at_quick_exit(arg1: ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
pub type _purecall_handler = ::std::option::Option<unsafe extern "C" fn()>;
pub type _invalid_parameter_handler =
    ::std::option::Option<unsafe extern "C" fn(arg1: *const wchar_t,
                                               arg2: *const wchar_t,
                                               arg3: *const wchar_t,
                                               arg4: ::std::os::raw::c_uint,
                                               arg5: usize)>;
extern "C" {
    pub fn _set_purecall_handler(_Handler: _purecall_handler)
     -> _purecall_handler;
}
extern "C" {
    pub fn _get_purecall_handler() -> _purecall_handler;
}
extern "C" {
    pub fn _set_invalid_parameter_handler(_Handler:
                                              _invalid_parameter_handler)
     -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_invalid_parameter_handler() -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_thread_local_invalid_parameter_handler(_Handler:
                                                           _invalid_parameter_handler)
     -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _get_thread_local_invalid_parameter_handler()
     -> _invalid_parameter_handler;
}
extern "C" {
    pub fn _set_error_mode(_Mode: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __doserrno() -> *mut ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _set_doserrno(_Value: ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn _get_doserrno(_Value: *mut ::std::os::raw::c_ulong) -> errno_t;
}
extern "C" {
    pub fn __sys_errlist() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __sys_nerr() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(_ErrMsg: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn __p__pgmptr() -> *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wpgmptr() -> *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__fmode() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn _get_pgmptr(_Value: *mut *mut ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _get_wpgmptr(_Value: *mut *mut wchar_t) -> errno_t;
}
extern "C" {
    pub fn _set_fmode(_Mode: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _get_fmode(_PMode: *mut ::std::os::raw::c_int) -> errno_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__div_t() {
    assert_eq!(::std::mem::size_of::<_div_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( _div_t ) ));
    assert_eq! (::std::mem::align_of::<_div_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _div_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _div_t ) ) . quot as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _div_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _div_t ) ) . rem as * const _ as usize }
                , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _div_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for _div_t {
    fn clone(&self) -> Self { *self }
}
pub type div_t = _div_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout__ldiv_t() {
    assert_eq!(::std::mem::size_of::<_ldiv_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( _ldiv_t ) ));
    assert_eq! (::std::mem::align_of::<_ldiv_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _ldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _ldiv_t ) ) . quot as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _ldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _ldiv_t ) ) . rem as * const _ as usize }
                , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _ldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for _ldiv_t {
    fn clone(&self) -> Self { *self }
}
pub type ldiv_t = _ldiv_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout__lldiv_t() {
    assert_eq!(::std::mem::size_of::<_lldiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _lldiv_t ) ));
    assert_eq! (::std::mem::align_of::<_lldiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _lldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _lldiv_t ) ) . quot as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _lldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _lldiv_t ) ) . rem as * const _ as usize
                } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _lldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for _lldiv_t {
    fn clone(&self) -> Self { *self }
}
pub type lldiv_t = _lldiv_t;
extern "C" {
    pub fn abs(_Number: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(_Number: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(_Number: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _abs64(_Number: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _byteswap_ushort(_Number: ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(_Number: ::std::os::raw::c_ulong)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(_Number: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn div(_Numerator: ::std::os::raw::c_int,
               _Denominator: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(_Numerator: ::std::os::raw::c_long,
                _Denominator: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(_Numerator: ::std::os::raw::c_longlong,
                 _Denominator: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn _rotl(_Value: ::std::os::raw::c_uint,
                 _Shift: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotl(_Value: ::std::os::raw::c_ulong,
                  _Shift: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotl64(_Value: ::std::os::raw::c_ulonglong,
                   _Shift: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _rotr(_Value: ::std::os::raw::c_uint,
                 _Shift: ::std::os::raw::c_int) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn _lrotr(_Value: ::std::os::raw::c_ulong,
                  _Shift: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _rotr64(_Value: ::std::os::raw::c_ulonglong,
                   _Shift: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn srand(_Seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _LDOUBLE {
    pub ld: [::std::os::raw::c_uchar; 10usize],
}
#[test]
fn bindgen_test_layout__LDOUBLE() {
    assert_eq!(::std::mem::size_of::<_LDOUBLE>() , 10usize , concat ! (
               "Size of: " , stringify ! ( _LDOUBLE ) ));
    assert_eq! (::std::mem::align_of::<_LDOUBLE>() , 1usize , concat ! (
                "Alignment of " , stringify ! ( _LDOUBLE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _LDOUBLE ) ) . ld as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _LDOUBLE ) , "::" ,
                stringify ! ( ld ) ));
}
impl Clone for _LDOUBLE {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _CRT_DOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__CRT_DOUBLE() {
    assert_eq!(::std::mem::size_of::<_CRT_DOUBLE>() , 8usize , concat ! (
               "Size of: " , stringify ! ( _CRT_DOUBLE ) ));
    assert_eq! (::std::mem::align_of::<_CRT_DOUBLE>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _CRT_DOUBLE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _CRT_DOUBLE ) ) . x as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _CRT_DOUBLE ) , "::" ,
                stringify ! ( x ) ));
}
impl Clone for _CRT_DOUBLE {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _CRT_FLOAT {
    pub f: f32,
}
#[test]
fn bindgen_test_layout__CRT_FLOAT() {
    assert_eq!(::std::mem::size_of::<_CRT_FLOAT>() , 4usize , concat ! (
               "Size of: " , stringify ! ( _CRT_FLOAT ) ));
    assert_eq! (::std::mem::align_of::<_CRT_FLOAT>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _CRT_FLOAT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _CRT_FLOAT ) ) . f as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _CRT_FLOAT ) , "::" ,
                stringify ! ( f ) ));
}
impl Clone for _CRT_FLOAT {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _LONGDOUBLE {
    pub x: f64,
}
#[test]
fn bindgen_test_layout__LONGDOUBLE() {
    assert_eq!(::std::mem::size_of::<_LONGDOUBLE>() , 8usize , concat ! (
               "Size of: " , stringify ! ( _LONGDOUBLE ) ));
    assert_eq! (::std::mem::align_of::<_LONGDOUBLE>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _LONGDOUBLE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _LONGDOUBLE ) ) . x as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _LONGDOUBLE ) , "::" ,
                stringify ! ( x ) ));
}
impl Clone for _LONGDOUBLE {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _LDBL12 {
    pub ld12: [::std::os::raw::c_uchar; 12usize],
}
#[test]
fn bindgen_test_layout__LDBL12() {
    assert_eq!(::std::mem::size_of::<_LDBL12>() , 12usize , concat ! (
               "Size of: " , stringify ! ( _LDBL12 ) ));
    assert_eq! (::std::mem::align_of::<_LDBL12>() , 1usize , concat ! (
                "Alignment of " , stringify ! ( _LDBL12 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _LDBL12 ) ) . ld12 as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _LDBL12 ) , "::" ,
                stringify ! ( ld12 ) ));
}
impl Clone for _LDBL12 {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn atof(_String: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(_String: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(_String: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(_String: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64(_String: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atof_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t)
     -> f64;
}
extern "C" {
    pub fn _atoi_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atol_l(_String: *const ::std::os::raw::c_char, _Locale: _locale_t)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _atoll_l(_String: *const ::std::os::raw::c_char,
                    _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoi64_l(_String: *const ::std::os::raw::c_char,
                     _Locale: _locale_t) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _atoflt(_Result: *mut _CRT_FLOAT,
                   _String: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl(_Result: *mut _CRT_DOUBLE,
                   _String: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl(_Result: *mut _LDOUBLE,
                    _String: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoflt_l(_Result: *mut _CRT_FLOAT,
                     _String: *const ::std::os::raw::c_char,
                     _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atodbl_l(_Result: *mut _CRT_DOUBLE,
                     _String: *mut ::std::os::raw::c_char, _Locale: _locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _atoldbl_l(_Result: *mut _LDOUBLE,
                      _String: *mut ::std::os::raw::c_char,
                      _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtof(_String: *const ::std::os::raw::c_char,
                  _EndPtr: *mut *mut ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn _strtof_l(_String: *const ::std::os::raw::c_char,
                     _EndPtr: *mut *mut ::std::os::raw::c_char,
                     _Locale: _locale_t) -> f32;
}
extern "C" {
    pub fn strtod(_String: *const ::std::os::raw::c_char,
                  _EndPtr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn _strtod_l(_String: *const ::std::os::raw::c_char,
                     _EndPtr: *mut *mut ::std::os::raw::c_char,
                     _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn strtold(_String: *const ::std::os::raw::c_char,
                   _EndPtr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn _strtold_l(_String: *const ::std::os::raw::c_char,
                      _EndPtr: *mut *mut ::std::os::raw::c_char,
                      _Locale: _locale_t) -> f64;
}
extern "C" {
    pub fn strtol(_String: *const ::std::os::raw::c_char,
                  _EndPtr: *mut *mut ::std::os::raw::c_char,
                  _Radix: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn _strtol_l(_String: *const ::std::os::raw::c_char,
                     _EndPtr: *mut *mut ::std::os::raw::c_char,
                     _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoll(_String: *const ::std::os::raw::c_char,
                   _EndPtr: *mut *mut ::std::os::raw::c_char,
                   _Radix: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoll_l(_String: *const ::std::os::raw::c_char,
                      _EndPtr: *mut *mut ::std::os::raw::c_char,
                      _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(_String: *const ::std::os::raw::c_char,
                   _EndPtr: *mut *mut ::std::os::raw::c_char,
                   _Radix: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn _strtoul_l(_String: *const ::std::os::raw::c_char,
                      _EndPtr: *mut *mut ::std::os::raw::c_char,
                      _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(_String: *const ::std::os::raw::c_char,
                    _EndPtr: *mut *mut ::std::os::raw::c_char,
                    _Radix: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoull_l(_String: *const ::std::os::raw::c_char,
                       _EndPtr: *mut *mut ::std::os::raw::c_char,
                       _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoi64(_String: *const ::std::os::raw::c_char,
                     _EndPtr: *mut *mut ::std::os::raw::c_char,
                     _Radix: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoi64_l(_String: *const ::std::os::raw::c_char,
                       _EndPtr: *mut *mut ::std::os::raw::c_char,
                       _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn _strtoui64(_String: *const ::std::os::raw::c_char,
                      _EndPtr: *mut *mut ::std::os::raw::c_char,
                      _Radix: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _strtoui64_l(_String: *const ::std::os::raw::c_char,
                        _EndPtr: *mut *mut ::std::os::raw::c_char,
                        _Radix: ::std::os::raw::c_int, _Locale: _locale_t)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn _itoa_s(_Value: ::std::os::raw::c_int,
                   _Buffer: *mut ::std::os::raw::c_char, _BufferCount: usize,
                   _Radix: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _itoa(_Value: ::std::os::raw::c_int,
                 _Buffer: *mut ::std::os::raw::c_char,
                 _Radix: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ltoa_s(_Value: ::std::os::raw::c_long,
                   _Buffer: *mut ::std::os::raw::c_char, _BufferCount: usize,
                   _Radix: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _ltoa(_Value: ::std::os::raw::c_long,
                 _Buffer: *mut ::std::os::raw::c_char,
                 _Radix: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ultoa_s(_Value: ::std::os::raw::c_ulong,
                    _Buffer: *mut ::std::os::raw::c_char, _BufferCount: usize,
                    _Radix: ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _ultoa(_Value: ::std::os::raw::c_ulong,
                  _Buffer: *mut ::std::os::raw::c_char,
                  _Radix: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _i64toa_s(_Value: ::std::os::raw::c_longlong,
                     _Buffer: *mut ::std::os::raw::c_char,
                     _BufferCount: usize, _Radix: ::std::os::raw::c_int)
     -> errno_t;
}
extern "C" {
    pub fn _i64toa(_Value: ::std::os::raw::c_longlong,
                   _Buffer: *mut ::std::os::raw::c_char,
                   _Radix: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ui64toa_s(_Value: ::std::os::raw::c_ulonglong,
                      _Buffer: *mut ::std::os::raw::c_char,
                      _BufferCount: usize, _Radix: ::std::os::raw::c_int)
     -> errno_t;
}
extern "C" {
    pub fn _ui64toa(_Value: ::std::os::raw::c_ulonglong,
                    _Buffer: *mut ::std::os::raw::c_char,
                    _Radix: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _ecvt_s(_Buffer: *mut ::std::os::raw::c_char, _BufferCount: usize,
                   _Value: f64, _DigitCount: ::std::os::raw::c_int,
                   _PtDec: *mut ::std::os::raw::c_int,
                   _PtSign: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _ecvt(_Value: f64, _DigitCount: ::std::os::raw::c_int,
                 _PtDec: *mut ::std::os::raw::c_int,
                 _PtSign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _fcvt_s(_Buffer: *mut ::std::os::raw::c_char, _BufferCount: usize,
                   _Value: f64, _FractionalDigitCount: ::std::os::raw::c_int,
                   _PtDec: *mut ::std::os::raw::c_int,
                   _PtSign: *mut ::std::os::raw::c_int) -> errno_t;
}
extern "C" {
    pub fn _fcvt(_Value: f64, _FractionalDigitCount: ::std::os::raw::c_int,
                 _PtDec: *mut ::std::os::raw::c_int,
                 _PtSign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _gcvt_s(_Buffer: *mut ::std::os::raw::c_char, _BufferCount: usize,
                   _Value: f64, _DigitCount: ::std::os::raw::c_int)
     -> errno_t;
}
extern "C" {
    pub fn _gcvt(_Value: f64, _DigitCount: ::std::os::raw::c_int,
                 _Buffer: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ___mb_cur_max_func() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l_func(arg1: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(_Ch: *const ::std::os::raw::c_char, _MaxCount: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mblen_l(_Ch: *const ::std::os::raw::c_char, _MaxCount: usize,
                    _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbstrlen(_String: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn _mbstrlen_l(_String: *const ::std::os::raw::c_char,
                       _Locale: _locale_t) -> usize;
}
extern "C" {
    pub fn _mbstrnlen(_String: *const ::std::os::raw::c_char,
                      _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _mbstrnlen_l(_String: *const ::std::os::raw::c_char,
                        _MaxCount: usize, _Locale: _locale_t) -> usize;
}
extern "C" {
    pub fn mbtowc(_DstCh: *mut wchar_t, _SrcCh: *const ::std::os::raw::c_char,
                  _SrcSizeInBytes: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _mbtowc_l(_DstCh: *mut wchar_t,
                     _SrcCh: *const ::std::os::raw::c_char,
                     _SrcSizeInBytes: usize, _Locale: _locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_s(_PtNumOfCharConverted: *mut usize,
                      _DstBuf: *mut wchar_t, _SizeInWords: usize,
                      _SrcBuf: *const ::std::os::raw::c_char,
                      _MaxCount: usize) -> errno_t;
}
extern "C" {
    pub fn mbstowcs(_Dest: *mut wchar_t,
                    _Source: *const ::std::os::raw::c_char, _MaxCount: usize)
     -> usize;
}
extern "C" {
    pub fn _mbstowcs_s_l(_PtNumOfCharConverted: *mut usize,
                         _DstBuf: *mut wchar_t, _SizeInWords: usize,
                         _SrcBuf: *const ::std::os::raw::c_char,
                         _MaxCount: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _mbstowcs_l(_Dest: *mut wchar_t,
                       _Source: *const ::std::os::raw::c_char,
                       _MaxCount: usize, _Locale: _locale_t) -> usize;
}
extern "C" {
    pub fn wctomb(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _wctomb_l(_MbCh: *mut ::std::os::raw::c_char, _WCh: wchar_t,
                     _Locale: _locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb_s(_SizeConverted: *mut ::std::os::raw::c_int,
                    _MbCh: *mut ::std::os::raw::c_char, _SizeInBytes: rsize_t,
                    _WCh: wchar_t) -> errno_t;
}
extern "C" {
    pub fn _wctomb_s_l(_SizeConverted: *mut ::std::os::raw::c_int,
                       _MbCh: *mut ::std::os::raw::c_char,
                       _SizeInBytes: usize, _WCh: wchar_t, _Locale: _locale_t)
     -> errno_t;
}
extern "C" {
    pub fn wcstombs_s(_PtNumOfCharConverted: *mut usize,
                      _Dst: *mut ::std::os::raw::c_char,
                      _DstSizeInBytes: usize, _Src: *const wchar_t,
                      _MaxCountInBytes: usize) -> errno_t;
}
extern "C" {
    pub fn wcstombs(_Dest: *mut ::std::os::raw::c_char,
                    _Source: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _wcstombs_s_l(_PtNumOfCharConverted: *mut usize,
                         _Dst: *mut ::std::os::raw::c_char,
                         _DstSizeInBytes: usize, _Src: *const wchar_t,
                         _MaxCountInBytes: usize, _Locale: _locale_t)
     -> errno_t;
}
extern "C" {
    pub fn _wcstombs_l(_Dest: *mut ::std::os::raw::c_char,
                       _Source: *const wchar_t, _MaxCount: usize,
                       _Locale: _locale_t) -> usize;
}
extern "C" {
    pub fn _fullpath(_Buffer: *mut ::std::os::raw::c_char,
                     _Path: *const ::std::os::raw::c_char,
                     _BufferCount: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _makepath_s(_Buffer: *mut ::std::os::raw::c_char,
                       _BufferCount: usize,
                       _Drive: *const ::std::os::raw::c_char,
                       _Dir: *const ::std::os::raw::c_char,
                       _Filename: *const ::std::os::raw::c_char,
                       _Ext: *const ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _makepath(_Buffer: *mut ::std::os::raw::c_char,
                     _Drive: *const ::std::os::raw::c_char,
                     _Dir: *const ::std::os::raw::c_char,
                     _Filename: *const ::std::os::raw::c_char,
                     _Ext: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn _splitpath(_FullPath: *const ::std::os::raw::c_char,
                      _Drive: *mut ::std::os::raw::c_char,
                      _Dir: *mut ::std::os::raw::c_char,
                      _Filename: *mut ::std::os::raw::c_char,
                      _Ext: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _splitpath_s(_FullPath: *const ::std::os::raw::c_char,
                        _Drive: *mut ::std::os::raw::c_char,
                        _DriveCount: usize, _Dir: *mut ::std::os::raw::c_char,
                        _DirCount: usize,
                        _Filename: *mut ::std::os::raw::c_char,
                        _FilenameCount: usize,
                        _Ext: *mut ::std::os::raw::c_char, _ExtCount: usize)
     -> errno_t;
}
extern "C" {
    pub fn getenv_s(_RequiredCount: *mut usize,
                    _Buffer: *mut ::std::os::raw::c_char,
                    _BufferCount: rsize_t,
                    _VarName: *const ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn __p___argc() -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn __p___argv() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p___wargv() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn __p__environ() -> *mut *mut *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __p__wenviron() -> *mut *mut *mut wchar_t;
}
extern "C" {
    pub fn getenv(_VarName: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn _dupenv_s(_Buffer: *mut *mut ::std::os::raw::c_char,
                     _BufferCount: *mut usize,
                     _VarName: *const ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn system(_Command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv(_EnvString: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _putenv_s(_Name: *const ::std::os::raw::c_char,
                     _Value: *const ::std::os::raw::c_char) -> errno_t;
}
extern "C" {
    pub fn _searchenv_s(_Filename: *const ::std::os::raw::c_char,
                        _VarName: *const ::std::os::raw::c_char,
                        _Buffer: *mut ::std::os::raw::c_char,
                        _BufferCount: usize) -> errno_t;
}
extern "C" {
    pub fn _searchenv(_Filename: *const ::std::os::raw::c_char,
                      _VarName: *const ::std::os::raw::c_char,
                      _Buffer: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn _seterrormode(_Mode: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _beep(_Frequency: ::std::os::raw::c_uint,
                 _Duration: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn _sleep(_Duration: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn ecvt(_Value: f64, _DigitCount: ::std::os::raw::c_int,
                _PtDec: *mut ::std::os::raw::c_int,
                _PtSign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(_Value: f64, _FractionalDigitCount: ::std::os::raw::c_int,
                _PtDec: *mut ::std::os::raw::c_int,
                _PtSign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(_Value: f64, _DigitCount: ::std::os::raw::c_int,
                _DstBuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn itoa(_Value: ::std::os::raw::c_int,
                _Buffer: *mut ::std::os::raw::c_char,
                _Radix: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ltoa(_Value: ::std::os::raw::c_long,
                _Buffer: *mut ::std::os::raw::c_char,
                _Radix: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(_Buf1: *mut ::std::os::raw::c_char,
                _Buf2: *mut ::std::os::raw::c_char,
                _SizeInBytes: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ultoa(_Value: ::std::os::raw::c_ulong,
                 _Buffer: *mut ::std::os::raw::c_char,
                 _Radix: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(_EnvString: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn onexit(_Func: _onexit_t) -> _onexit_t;
}
pub const BGFX_RENDERER_TYPE_NOOP: bgfx_renderer_type = 0;
pub const BGFX_RENDERER_TYPE_DIRECT3D9: bgfx_renderer_type = 1;
pub const BGFX_RENDERER_TYPE_DIRECT3D11: bgfx_renderer_type = 2;
pub const BGFX_RENDERER_TYPE_DIRECT3D12: bgfx_renderer_type = 3;
pub const BGFX_RENDERER_TYPE_GNM: bgfx_renderer_type = 4;
pub const BGFX_RENDERER_TYPE_METAL: bgfx_renderer_type = 5;
pub const BGFX_RENDERER_TYPE_OPENGLES: bgfx_renderer_type = 6;
pub const BGFX_RENDERER_TYPE_OPENGL: bgfx_renderer_type = 7;
pub const BGFX_RENDERER_TYPE_VULKAN: bgfx_renderer_type = 8;
pub const BGFX_RENDERER_TYPE_COUNT: bgfx_renderer_type = 9;
pub type bgfx_renderer_type = ::std::os::raw::c_int;
pub use self::bgfx_renderer_type as bgfx_renderer_type_t;
pub const BGFX_ACCESS_READ: bgfx_access = 0;
pub const BGFX_ACCESS_WRITE: bgfx_access = 1;
pub const BGFX_ACCESS_READWRITE: bgfx_access = 2;
pub const BGFX_ACCESS_COUNT: bgfx_access = 3;
pub type bgfx_access = ::std::os::raw::c_int;
pub use self::bgfx_access as bgfx_access_t;
pub const BGFX_ATTRIB_POSITION: bgfx_attrib = 0;
pub const BGFX_ATTRIB_NORMAL: bgfx_attrib = 1;
pub const BGFX_ATTRIB_TANGENT: bgfx_attrib = 2;
pub const BGFX_ATTRIB_BITANGENT: bgfx_attrib = 3;
pub const BGFX_ATTRIB_COLOR0: bgfx_attrib = 4;
pub const BGFX_ATTRIB_COLOR1: bgfx_attrib = 5;
pub const BGFX_ATTRIB_INDICES: bgfx_attrib = 6;
pub const BGFX_ATTRIB_WEIGHT: bgfx_attrib = 7;
pub const BGFX_ATTRIB_TEXCOORD0: bgfx_attrib = 8;
pub const BGFX_ATTRIB_TEXCOORD1: bgfx_attrib = 9;
pub const BGFX_ATTRIB_TEXCOORD2: bgfx_attrib = 10;
pub const BGFX_ATTRIB_TEXCOORD3: bgfx_attrib = 11;
pub const BGFX_ATTRIB_TEXCOORD4: bgfx_attrib = 12;
pub const BGFX_ATTRIB_TEXCOORD5: bgfx_attrib = 13;
pub const BGFX_ATTRIB_TEXCOORD6: bgfx_attrib = 14;
pub const BGFX_ATTRIB_TEXCOORD7: bgfx_attrib = 15;
pub const BGFX_ATTRIB_COUNT: bgfx_attrib = 16;
pub type bgfx_attrib = ::std::os::raw::c_int;
pub use self::bgfx_attrib as bgfx_attrib_t;
pub const BGFX_ATTRIB_TYPE_UINT8: bgfx_attrib_type = 0;
pub const BGFX_ATTRIB_TYPE_UINT10: bgfx_attrib_type = 1;
pub const BGFX_ATTRIB_TYPE_INT16: bgfx_attrib_type = 2;
pub const BGFX_ATTRIB_TYPE_HALF: bgfx_attrib_type = 3;
pub const BGFX_ATTRIB_TYPE_FLOAT: bgfx_attrib_type = 4;
pub const BGFX_ATTRIB_TYPE_COUNT: bgfx_attrib_type = 5;
pub type bgfx_attrib_type = ::std::os::raw::c_int;
pub use self::bgfx_attrib_type as bgfx_attrib_type_t;
pub const BGFX_TEXTURE_FORMAT_BC1: bgfx_texture_format = 0;
pub const BGFX_TEXTURE_FORMAT_BC2: bgfx_texture_format = 1;
pub const BGFX_TEXTURE_FORMAT_BC3: bgfx_texture_format = 2;
pub const BGFX_TEXTURE_FORMAT_BC4: bgfx_texture_format = 3;
pub const BGFX_TEXTURE_FORMAT_BC5: bgfx_texture_format = 4;
pub const BGFX_TEXTURE_FORMAT_BC6H: bgfx_texture_format = 5;
pub const BGFX_TEXTURE_FORMAT_BC7: bgfx_texture_format = 6;
pub const BGFX_TEXTURE_FORMAT_ETC1: bgfx_texture_format = 7;
pub const BGFX_TEXTURE_FORMAT_ETC2: bgfx_texture_format = 8;
pub const BGFX_TEXTURE_FORMAT_ETC2A: bgfx_texture_format = 9;
pub const BGFX_TEXTURE_FORMAT_ETC2A1: bgfx_texture_format = 10;
pub const BGFX_TEXTURE_FORMAT_PTC12: bgfx_texture_format = 11;
pub const BGFX_TEXTURE_FORMAT_PTC14: bgfx_texture_format = 12;
pub const BGFX_TEXTURE_FORMAT_PTC12A: bgfx_texture_format = 13;
pub const BGFX_TEXTURE_FORMAT_PTC14A: bgfx_texture_format = 14;
pub const BGFX_TEXTURE_FORMAT_PTC22: bgfx_texture_format = 15;
pub const BGFX_TEXTURE_FORMAT_PTC24: bgfx_texture_format = 16;
pub const BGFX_TEXTURE_FORMAT_UNKNOWN: bgfx_texture_format = 17;
pub const BGFX_TEXTURE_FORMAT_R1: bgfx_texture_format = 18;
pub const BGFX_TEXTURE_FORMAT_A8: bgfx_texture_format = 19;
pub const BGFX_TEXTURE_FORMAT_R8: bgfx_texture_format = 20;
pub const BGFX_TEXTURE_FORMAT_R8I: bgfx_texture_format = 21;
pub const BGFX_TEXTURE_FORMAT_R8U: bgfx_texture_format = 22;
pub const BGFX_TEXTURE_FORMAT_R8S: bgfx_texture_format = 23;
pub const BGFX_TEXTURE_FORMAT_R16: bgfx_texture_format = 24;
pub const BGFX_TEXTURE_FORMAT_R16I: bgfx_texture_format = 25;
pub const BGFX_TEXTURE_FORMAT_R16U: bgfx_texture_format = 26;
pub const BGFX_TEXTURE_FORMAT_R16F: bgfx_texture_format = 27;
pub const BGFX_TEXTURE_FORMAT_R16S: bgfx_texture_format = 28;
pub const BGFX_TEXTURE_FORMAT_R32I: bgfx_texture_format = 29;
pub const BGFX_TEXTURE_FORMAT_R32U: bgfx_texture_format = 30;
pub const BGFX_TEXTURE_FORMAT_R32F: bgfx_texture_format = 31;
pub const BGFX_TEXTURE_FORMAT_RG8: bgfx_texture_format = 32;
pub const BGFX_TEXTURE_FORMAT_RG8I: bgfx_texture_format = 33;
pub const BGFX_TEXTURE_FORMAT_RG8U: bgfx_texture_format = 34;
pub const BGFX_TEXTURE_FORMAT_RG8S: bgfx_texture_format = 35;
pub const BGFX_TEXTURE_FORMAT_RG16: bgfx_texture_format = 36;
pub const BGFX_TEXTURE_FORMAT_RG16I: bgfx_texture_format = 37;
pub const BGFX_TEXTURE_FORMAT_RG16U: bgfx_texture_format = 38;
pub const BGFX_TEXTURE_FORMAT_RG16F: bgfx_texture_format = 39;
pub const BGFX_TEXTURE_FORMAT_RG16S: bgfx_texture_format = 40;
pub const BGFX_TEXTURE_FORMAT_RG32I: bgfx_texture_format = 41;
pub const BGFX_TEXTURE_FORMAT_RG32U: bgfx_texture_format = 42;
pub const BGFX_TEXTURE_FORMAT_RG32F: bgfx_texture_format = 43;
pub const BGFX_TEXTURE_FORMAT_RGB8: bgfx_texture_format = 44;
pub const BGFX_TEXTURE_FORMAT_RGB8I: bgfx_texture_format = 45;
pub const BGFX_TEXTURE_FORMAT_RGB8U: bgfx_texture_format = 46;
pub const BGFX_TEXTURE_FORMAT_RGB8S: bgfx_texture_format = 47;
pub const BGFX_TEXTURE_FORMAT_RGB9E5F: bgfx_texture_format = 48;
pub const BGFX_TEXTURE_FORMAT_BGRA8: bgfx_texture_format = 49;
pub const BGFX_TEXTURE_FORMAT_RGBA8: bgfx_texture_format = 50;
pub const BGFX_TEXTURE_FORMAT_RGBA8I: bgfx_texture_format = 51;
pub const BGFX_TEXTURE_FORMAT_RGBA8U: bgfx_texture_format = 52;
pub const BGFX_TEXTURE_FORMAT_RGBA8S: bgfx_texture_format = 53;
pub const BGFX_TEXTURE_FORMAT_RGBA16: bgfx_texture_format = 54;
pub const BGFX_TEXTURE_FORMAT_RGBA16I: bgfx_texture_format = 55;
pub const BGFX_TEXTURE_FORMAT_RGBA16U: bgfx_texture_format = 56;
pub const BGFX_TEXTURE_FORMAT_RGBA16F: bgfx_texture_format = 57;
pub const BGFX_TEXTURE_FORMAT_RGBA16S: bgfx_texture_format = 58;
pub const BGFX_TEXTURE_FORMAT_RGBA32I: bgfx_texture_format = 59;
pub const BGFX_TEXTURE_FORMAT_RGBA32U: bgfx_texture_format = 60;
pub const BGFX_TEXTURE_FORMAT_RGBA32F: bgfx_texture_format = 61;
pub const BGFX_TEXTURE_FORMAT_R5G6B5: bgfx_texture_format = 62;
pub const BGFX_TEXTURE_FORMAT_RGBA4: bgfx_texture_format = 63;
pub const BGFX_TEXTURE_FORMAT_RGB5A1: bgfx_texture_format = 64;
pub const BGFX_TEXTURE_FORMAT_RGB10A2: bgfx_texture_format = 65;
pub const BGFX_TEXTURE_FORMAT_R11G11B10F: bgfx_texture_format = 66;
pub const BGFX_TEXTURE_FORMAT_UNKNOWN_DEPTH: bgfx_texture_format = 67;
pub const BGFX_TEXTURE_FORMAT_D16: bgfx_texture_format = 68;
pub const BGFX_TEXTURE_FORMAT_D24: bgfx_texture_format = 69;
pub const BGFX_TEXTURE_FORMAT_D24S8: bgfx_texture_format = 70;
pub const BGFX_TEXTURE_FORMAT_D32: bgfx_texture_format = 71;
pub const BGFX_TEXTURE_FORMAT_D16F: bgfx_texture_format = 72;
pub const BGFX_TEXTURE_FORMAT_D24F: bgfx_texture_format = 73;
pub const BGFX_TEXTURE_FORMAT_D32F: bgfx_texture_format = 74;
pub const BGFX_TEXTURE_FORMAT_D0S8: bgfx_texture_format = 75;
pub const BGFX_TEXTURE_FORMAT_COUNT: bgfx_texture_format = 76;
pub type bgfx_texture_format = ::std::os::raw::c_int;
pub use self::bgfx_texture_format as bgfx_texture_format_t;
pub const BGFX_UNIFORM_TYPE_INT1: bgfx_uniform_type = 0;
pub const BGFX_UNIFORM_TYPE_END: bgfx_uniform_type = 1;
pub const BGFX_UNIFORM_TYPE_VEC4: bgfx_uniform_type = 2;
pub const BGFX_UNIFORM_TYPE_MAT3: bgfx_uniform_type = 3;
pub const BGFX_UNIFORM_TYPE_MAT4: bgfx_uniform_type = 4;
pub const BGFX_UNIFORM_TYPE_COUNT: bgfx_uniform_type = 5;
pub type bgfx_uniform_type = ::std::os::raw::c_int;
pub use self::bgfx_uniform_type as bgfx_uniform_type_t;
pub const BGFX_BACKBUFFER_RATIO_EQUAL: bgfx_backbuffer_ratio = 0;
pub const BGFX_BACKBUFFER_RATIO_HALF: bgfx_backbuffer_ratio = 1;
pub const BGFX_BACKBUFFER_RATIO_QUARTER: bgfx_backbuffer_ratio = 2;
pub const BGFX_BACKBUFFER_RATIO_EIGHTH: bgfx_backbuffer_ratio = 3;
pub const BGFX_BACKBUFFER_RATIO_SIXTEENTH: bgfx_backbuffer_ratio = 4;
pub const BGFX_BACKBUFFER_RATIO_DOUBLE: bgfx_backbuffer_ratio = 5;
pub const BGFX_BACKBUFFER_RATIO_COUNT: bgfx_backbuffer_ratio = 6;
pub type bgfx_backbuffer_ratio = ::std::os::raw::c_int;
pub use self::bgfx_backbuffer_ratio as bgfx_backbuffer_ratio_t;
pub const BGFX_OCCLUSION_QUERY_RESULT_INVISIBLE: bgfx_occlusion_query_result =
    0;
pub const BGFX_OCCLUSION_QUERY_RESULT_VISIBLE: bgfx_occlusion_query_result =
    1;
pub const BGFX_OCCLUSION_QUERY_RESULT_NORESULT: bgfx_occlusion_query_result =
    2;
pub const BGFX_OCCLUSION_QUERY_RESULT_COUNT: bgfx_occlusion_query_result = 3;
pub type bgfx_occlusion_query_result = ::std::os::raw::c_int;
pub use self::bgfx_occlusion_query_result as bgfx_occlusion_query_result_t;
pub const BGFX_TOPOLOGY_CONVERT_TRI_LIST_FLIP_WINDING: bgfx_topology_convert =
    0;
pub const BGFX_TOPOLOGY_CONVERT_TRI_LIST_TO_LINE_LIST: bgfx_topology_convert =
    1;
pub const BGFX_TOPOLOGY_CONVERT_TRI_STRIP_TO_TRI_LIST: bgfx_topology_convert =
    2;
pub const BGFX_TOPOLOGY_CONVERT_LINE_STRIP_TO_LINE_LIST: bgfx_topology_convert
          =
    3;
pub const BGFX_TOPOLOGY_CONVERT_COUNT: bgfx_topology_convert = 4;
pub type bgfx_topology_convert = ::std::os::raw::c_int;
pub use self::bgfx_topology_convert as bgfx_topology_convert_t;
pub const BGFX_TOPOLOGY_SORT_DIRECTION_FRONT_TO_BACK_MIN: bgfx_topology_sort =
    0;
pub const BGFX_TOPOLOGY_SORT_DIRECTION_FRONT_TO_BACK_AVG: bgfx_topology_sort =
    1;
pub const BGFX_TOPOLOGY_SORT_DIRECTION_FRONT_TO_BACK_MAX: bgfx_topology_sort =
    2;
pub const BGFX_TOPOLOGY_SORT_DIRECTION_BACK_TO_FRONT_MIN: bgfx_topology_sort =
    3;
pub const BGFX_TOPOLOGY_SORT_DIRECTION_BACK_TO_FRONT_AVG: bgfx_topology_sort =
    4;
pub const BGFX_TOPOLOGY_SORT_DIRECTION_BACK_TO_FRONT_MAX: bgfx_topology_sort =
    5;
pub const BGFX_TOPOLOGY_SORT_DISTANCE_FRONT_TO_BACK_MIN: bgfx_topology_sort =
    6;
pub const BGFX_TOPOLOGY_SORT_DISTANCE_FRONT_TO_BACK_AVG: bgfx_topology_sort =
    7;
pub const BGFX_TOPOLOGY_SORT_DISTANCE_FRONT_TO_BACK_MAX: bgfx_topology_sort =
    8;
pub const BGFX_TOPOLOGY_SORT_DISTANCE_BACK_TO_FRONT_MIN: bgfx_topology_sort =
    9;
pub const BGFX_TOPOLOGY_SORT_DISTANCE_BACK_TO_FRONT_AVG: bgfx_topology_sort =
    10;
pub const BGFX_TOPOLOGY_SORT_DISTANCE_BACK_TO_FRONT_MAX: bgfx_topology_sort =
    11;
pub const BGFX_TOPOLOGY_SORT_COUNT: bgfx_topology_sort = 12;
pub type bgfx_topology_sort = ::std::os::raw::c_int;
pub use self::bgfx_topology_sort as bgfx_topology_sort_t;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_dynamic_index_buffer_handle {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_dynamic_index_buffer_handle() {
    assert_eq!(::std::mem::size_of::<bgfx_dynamic_index_buffer_handle>() ,
               2usize , concat ! (
               "Size of: " , stringify ! ( bgfx_dynamic_index_buffer_handle )
               ));
    assert_eq! (::std::mem::align_of::<bgfx_dynamic_index_buffer_handle>() ,
                2usize , concat ! (
                "Alignment of " , stringify ! (
                bgfx_dynamic_index_buffer_handle ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_dynamic_index_buffer_handle ) ) .
                idx as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_dynamic_index_buffer_handle ) , "::" , stringify ! ( idx
                ) ));
}
impl Clone for bgfx_dynamic_index_buffer_handle {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_dynamic_index_buffer_handle_t =
    bgfx_dynamic_index_buffer_handle;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_dynamic_vertex_buffer_handle {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_dynamic_vertex_buffer_handle() {
    assert_eq!(::std::mem::size_of::<bgfx_dynamic_vertex_buffer_handle>() ,
               2usize , concat ! (
               "Size of: " , stringify ! ( bgfx_dynamic_vertex_buffer_handle )
               ));
    assert_eq! (::std::mem::align_of::<bgfx_dynamic_vertex_buffer_handle>() ,
                2usize , concat ! (
                "Alignment of " , stringify ! (
                bgfx_dynamic_vertex_buffer_handle ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_dynamic_vertex_buffer_handle ) ) .
                idx as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_dynamic_vertex_buffer_handle ) , "::" , stringify ! ( idx
                ) ));
}
impl Clone for bgfx_dynamic_vertex_buffer_handle {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_dynamic_vertex_buffer_handle_t =
    bgfx_dynamic_vertex_buffer_handle;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_frame_buffer_handle {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_frame_buffer_handle() {
    assert_eq!(::std::mem::size_of::<bgfx_frame_buffer_handle>() , 2usize ,
               concat ! (
               "Size of: " , stringify ! ( bgfx_frame_buffer_handle ) ));
    assert_eq! (::std::mem::align_of::<bgfx_frame_buffer_handle>() , 2usize ,
                concat ! (
                "Alignment of " , stringify ! ( bgfx_frame_buffer_handle ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_frame_buffer_handle ) ) . idx as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_frame_buffer_handle ) , "::" , stringify ! ( idx ) ));
}
impl Clone for bgfx_frame_buffer_handle {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_frame_buffer_handle_t = bgfx_frame_buffer_handle;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_index_buffer_handle {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_index_buffer_handle() {
    assert_eq!(::std::mem::size_of::<bgfx_index_buffer_handle>() , 2usize ,
               concat ! (
               "Size of: " , stringify ! ( bgfx_index_buffer_handle ) ));
    assert_eq! (::std::mem::align_of::<bgfx_index_buffer_handle>() , 2usize ,
                concat ! (
                "Alignment of " , stringify ! ( bgfx_index_buffer_handle ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_index_buffer_handle ) ) . idx as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_index_buffer_handle ) , "::" , stringify ! ( idx ) ));
}
impl Clone for bgfx_index_buffer_handle {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_index_buffer_handle_t = bgfx_index_buffer_handle;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_indirect_buffer_handle {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_indirect_buffer_handle() {
    assert_eq!(::std::mem::size_of::<bgfx_indirect_buffer_handle>() , 2usize ,
               concat ! (
               "Size of: " , stringify ! ( bgfx_indirect_buffer_handle ) ));
    assert_eq! (::std::mem::align_of::<bgfx_indirect_buffer_handle>() , 2usize
                , concat ! (
                "Alignment of " , stringify ! ( bgfx_indirect_buffer_handle )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_indirect_buffer_handle ) ) . idx as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_indirect_buffer_handle ) , "::" , stringify ! ( idx ) ));
}
impl Clone for bgfx_indirect_buffer_handle {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_indirect_buffer_handle_t = bgfx_indirect_buffer_handle;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_occlusion_query_handle {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_occlusion_query_handle() {
    assert_eq!(::std::mem::size_of::<bgfx_occlusion_query_handle>() , 2usize ,
               concat ! (
               "Size of: " , stringify ! ( bgfx_occlusion_query_handle ) ));
    assert_eq! (::std::mem::align_of::<bgfx_occlusion_query_handle>() , 2usize
                , concat ! (
                "Alignment of " , stringify ! ( bgfx_occlusion_query_handle )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_occlusion_query_handle ) ) . idx as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_occlusion_query_handle ) , "::" , stringify ! ( idx ) ));
}
impl Clone for bgfx_occlusion_query_handle {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_occlusion_query_handle_t = bgfx_occlusion_query_handle;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_program_handle {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_program_handle() {
    assert_eq!(::std::mem::size_of::<bgfx_program_handle>() , 2usize , concat
               ! ( "Size of: " , stringify ! ( bgfx_program_handle ) ));
    assert_eq! (::std::mem::align_of::<bgfx_program_handle>() , 2usize ,
                concat ! (
                "Alignment of " , stringify ! ( bgfx_program_handle ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_program_handle ) ) . idx as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_program_handle ) ,
                "::" , stringify ! ( idx ) ));
}
impl Clone for bgfx_program_handle {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_program_handle_t = bgfx_program_handle;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_shader_handle {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_shader_handle() {
    assert_eq!(::std::mem::size_of::<bgfx_shader_handle>() , 2usize , concat !
               ( "Size of: " , stringify ! ( bgfx_shader_handle ) ));
    assert_eq! (::std::mem::align_of::<bgfx_shader_handle>() , 2usize , concat
                ! ( "Alignment of " , stringify ! ( bgfx_shader_handle ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_shader_handle ) ) . idx as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_shader_handle ) ,
                "::" , stringify ! ( idx ) ));
}
impl Clone for bgfx_shader_handle {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_shader_handle_t = bgfx_shader_handle;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_texture_handle {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_texture_handle() {
    assert_eq!(::std::mem::size_of::<bgfx_texture_handle>() , 2usize , concat
               ! ( "Size of: " , stringify ! ( bgfx_texture_handle ) ));
    assert_eq! (::std::mem::align_of::<bgfx_texture_handle>() , 2usize ,
                concat ! (
                "Alignment of " , stringify ! ( bgfx_texture_handle ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_texture_handle ) ) . idx as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_texture_handle ) ,
                "::" , stringify ! ( idx ) ));
}
impl Clone for bgfx_texture_handle {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_texture_handle_t = bgfx_texture_handle;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_uniform_handle {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_uniform_handle() {
    assert_eq!(::std::mem::size_of::<bgfx_uniform_handle>() , 2usize , concat
               ! ( "Size of: " , stringify ! ( bgfx_uniform_handle ) ));
    assert_eq! (::std::mem::align_of::<bgfx_uniform_handle>() , 2usize ,
                concat ! (
                "Alignment of " , stringify ! ( bgfx_uniform_handle ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_uniform_handle ) ) . idx as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_uniform_handle ) ,
                "::" , stringify ! ( idx ) ));
}
impl Clone for bgfx_uniform_handle {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_uniform_handle_t = bgfx_uniform_handle;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_vertex_buffer_handle {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_vertex_buffer_handle() {
    assert_eq!(::std::mem::size_of::<bgfx_vertex_buffer_handle>() , 2usize ,
               concat ! (
               "Size of: " , stringify ! ( bgfx_vertex_buffer_handle ) ));
    assert_eq! (::std::mem::align_of::<bgfx_vertex_buffer_handle>() , 2usize ,
                concat ! (
                "Alignment of " , stringify ! ( bgfx_vertex_buffer_handle )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_vertex_buffer_handle ) ) . idx as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_vertex_buffer_handle ) , "::" , stringify ! ( idx ) ));
}
impl Clone for bgfx_vertex_buffer_handle {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_vertex_buffer_handle_t = bgfx_vertex_buffer_handle;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_vertex_decl_handle {
    pub idx: u16,
}
#[test]
fn bindgen_test_layout_bgfx_vertex_decl_handle() {
    assert_eq!(::std::mem::size_of::<bgfx_vertex_decl_handle>() , 2usize ,
               concat ! (
               "Size of: " , stringify ! ( bgfx_vertex_decl_handle ) ));
    assert_eq! (::std::mem::align_of::<bgfx_vertex_decl_handle>() , 2usize ,
                concat ! (
                "Alignment of " , stringify ! ( bgfx_vertex_decl_handle ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_vertex_decl_handle ) ) . idx as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_vertex_decl_handle
                ) , "::" , stringify ! ( idx ) ));
}
impl Clone for bgfx_vertex_decl_handle {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_vertex_decl_handle_t = bgfx_vertex_decl_handle;
/**/
pub type bgfx_release_fn_t =
    ::std::option::Option<unsafe extern "C" fn(_ptr:
                                                   *mut ::std::os::raw::c_void,
                                               _userData:
                                                   *mut ::std::os::raw::c_void)>;
/**/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_memory {
    pub data: *mut u8,
    pub size: u32,
}
#[test]
fn bindgen_test_layout_bgfx_memory() {
    assert_eq!(::std::mem::size_of::<bgfx_memory>() , 16usize , concat ! (
               "Size of: " , stringify ! ( bgfx_memory ) ));
    assert_eq! (::std::mem::align_of::<bgfx_memory>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( bgfx_memory ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_memory ) ) . data as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_memory ) , "::" ,
                stringify ! ( data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_memory ) ) . size as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_memory ) , "::" ,
                stringify ! ( size ) ));
}
impl Clone for bgfx_memory {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_memory_t = bgfx_memory;
/**/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_transform {
    pub data: *mut f32,
    pub num: u16,
}
#[test]
fn bindgen_test_layout_bgfx_transform() {
    assert_eq!(::std::mem::size_of::<bgfx_transform>() , 16usize , concat ! (
               "Size of: " , stringify ! ( bgfx_transform ) ));
    assert_eq! (::std::mem::align_of::<bgfx_transform>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( bgfx_transform ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_transform ) ) . data as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_transform ) , "::"
                , stringify ! ( data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_transform ) ) . num as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_transform ) , "::"
                , stringify ! ( num ) ));
}
impl Clone for bgfx_transform {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_transform_t = bgfx_transform;
/**/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_hmd_eye {
    pub rotation: [f32; 4usize],
    pub translation: [f32; 3usize],
    pub fov: [f32; 4usize],
    pub viewOffset: [f32; 3usize],
    pub projection: [f32; 16usize],
    pub pixelsPerTanAngle: [f32; 2usize],
}
#[test]
fn bindgen_test_layout_bgfx_hmd_eye() {
    assert_eq!(::std::mem::size_of::<bgfx_hmd_eye>() , 128usize , concat ! (
               "Size of: " , stringify ! ( bgfx_hmd_eye ) ));
    assert_eq! (::std::mem::align_of::<bgfx_hmd_eye>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( bgfx_hmd_eye ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_hmd_eye ) ) . rotation as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_hmd_eye ) , "::" ,
                stringify ! ( rotation ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_hmd_eye ) ) . translation as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_hmd_eye ) , "::" ,
                stringify ! ( translation ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_hmd_eye ) ) . fov as * const _ as
                usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_hmd_eye ) , "::" ,
                stringify ! ( fov ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_hmd_eye ) ) . viewOffset as * const
                _ as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_hmd_eye ) , "::" ,
                stringify ! ( viewOffset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_hmd_eye ) ) . projection as * const
                _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_hmd_eye ) , "::" ,
                stringify ! ( projection ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_hmd_eye ) ) . pixelsPerTanAngle as *
                const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_hmd_eye ) , "::" ,
                stringify ! ( pixelsPerTanAngle ) ));
}
impl Clone for bgfx_hmd_eye {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_hmd_eye_t = bgfx_hmd_eye;
/**/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_hmd {
    pub eye: [bgfx_hmd_eye_t; 2usize],
    pub width: u16,
    pub height: u16,
    pub deviceWidth: u32,
    pub deviceHeight: u32,
    pub flags: u8,
}
#[test]
fn bindgen_test_layout_bgfx_hmd() {
    assert_eq!(::std::mem::size_of::<bgfx_hmd>() , 272usize , concat ! (
               "Size of: " , stringify ! ( bgfx_hmd ) ));
    assert_eq! (::std::mem::align_of::<bgfx_hmd>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( bgfx_hmd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_hmd ) ) . eye as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_hmd ) , "::" ,
                stringify ! ( eye ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_hmd ) ) . width as * const _ as
                usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_hmd ) , "::" ,
                stringify ! ( width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_hmd ) ) . height as * const _ as
                usize } , 258usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_hmd ) , "::" ,
                stringify ! ( height ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_hmd ) ) . deviceWidth as * const _
                as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_hmd ) , "::" ,
                stringify ! ( deviceWidth ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_hmd ) ) . deviceHeight as * const _
                as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_hmd ) , "::" ,
                stringify ! ( deviceHeight ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_hmd ) ) . flags as * const _ as
                usize } , 268usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_hmd ) , "::" ,
                stringify ! ( flags ) ));
}
impl Clone for bgfx_hmd {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_hmd_t = bgfx_hmd;
/**/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_stats {
    pub cpuTimeBegin: u64,
    pub cpuTimeEnd: u64,
    pub cpuTimerFreq: u64,
    pub gpuTimeBegin: u64,
    pub gpuTimeEnd: u64,
    pub gpuTimerFreq: u64,
    pub waitRender: i64,
    pub waitSubmit: i64,
    pub numDraw: u32,
    pub numCompute: u32,
    pub maxGpuLatency: u32,
    pub width: u16,
    pub height: u16,
    pub textWidth: u16,
    pub textHeight: u16,
}
#[test]
fn bindgen_test_layout_bgfx_stats() {
    assert_eq!(::std::mem::size_of::<bgfx_stats>() , 88usize , concat ! (
               "Size of: " , stringify ! ( bgfx_stats ) ));
    assert_eq! (::std::mem::align_of::<bgfx_stats>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( bgfx_stats ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_stats ) ) . cpuTimeBegin as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_stats ) , "::" ,
                stringify ! ( cpuTimeBegin ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_stats ) ) . cpuTimeEnd as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_stats ) , "::" ,
                stringify ! ( cpuTimeEnd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_stats ) ) . cpuTimerFreq as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_stats ) , "::" ,
                stringify ! ( cpuTimerFreq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_stats ) ) . gpuTimeBegin as * const
                _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_stats ) , "::" ,
                stringify ! ( gpuTimeBegin ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_stats ) ) . gpuTimeEnd as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_stats ) , "::" ,
                stringify ! ( gpuTimeEnd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_stats ) ) . gpuTimerFreq as * const
                _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_stats ) , "::" ,
                stringify ! ( gpuTimerFreq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_stats ) ) . waitRender as * const _
                as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_stats ) , "::" ,
                stringify ! ( waitRender ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_stats ) ) . waitSubmit as * const _
                as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_stats ) , "::" ,
                stringify ! ( waitSubmit ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_stats ) ) . numDraw as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_stats ) , "::" ,
                stringify ! ( numDraw ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_stats ) ) . numCompute as * const _
                as usize } , 68usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_stats ) , "::" ,
                stringify ! ( numCompute ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_stats ) ) . maxGpuLatency as * const
                _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_stats ) , "::" ,
                stringify ! ( maxGpuLatency ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_stats ) ) . width as * const _ as
                usize } , 76usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_stats ) , "::" ,
                stringify ! ( width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_stats ) ) . height as * const _ as
                usize } , 78usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_stats ) , "::" ,
                stringify ! ( height ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_stats ) ) . textWidth as * const _
                as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_stats ) , "::" ,
                stringify ! ( textWidth ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_stats ) ) . textHeight as * const _
                as usize } , 82usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_stats ) , "::" ,
                stringify ! ( textHeight ) ));
}
impl Clone for bgfx_stats {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_stats_t = bgfx_stats;
/**/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_vertex_decl {
    pub hash: u32,
    pub stride: u16,
    pub offset: [u16; 16usize],
    pub attributes: [u16; 16usize],
}
#[test]
fn bindgen_test_layout_bgfx_vertex_decl() {
    assert_eq!(::std::mem::size_of::<bgfx_vertex_decl>() , 72usize , concat !
               ( "Size of: " , stringify ! ( bgfx_vertex_decl ) ));
    assert_eq! (::std::mem::align_of::<bgfx_vertex_decl>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( bgfx_vertex_decl ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_vertex_decl ) ) . hash as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_vertex_decl ) ,
                "::" , stringify ! ( hash ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_vertex_decl ) ) . stride as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_vertex_decl ) ,
                "::" , stringify ! ( stride ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_vertex_decl ) ) . offset as * const
                _ as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_vertex_decl ) ,
                "::" , stringify ! ( offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_vertex_decl ) ) . attributes as *
                const _ as usize } , 38usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_vertex_decl ) ,
                "::" , stringify ! ( attributes ) ));
}
impl Clone for bgfx_vertex_decl {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_vertex_decl_t = bgfx_vertex_decl;
/**/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_transient_index_buffer {
    pub data: *mut u8,
    pub size: u32,
    pub handle: bgfx_index_buffer_handle_t,
    pub startIndex: u32,
}
#[test]
fn bindgen_test_layout_bgfx_transient_index_buffer() {
    assert_eq!(::std::mem::size_of::<bgfx_transient_index_buffer>() , 24usize
               , concat ! (
               "Size of: " , stringify ! ( bgfx_transient_index_buffer ) ));
    assert_eq! (::std::mem::align_of::<bgfx_transient_index_buffer>() , 8usize
                , concat ! (
                "Alignment of " , stringify ! ( bgfx_transient_index_buffer )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_transient_index_buffer ) ) . data as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_transient_index_buffer ) , "::" , stringify ! ( data )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_transient_index_buffer ) ) . size as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_transient_index_buffer ) , "::" , stringify ! ( size )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_transient_index_buffer ) ) . handle
                as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_transient_index_buffer ) , "::" , stringify ! ( handle )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_transient_index_buffer ) ) .
                startIndex as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_transient_index_buffer ) , "::" , stringify ! (
                startIndex ) ));
}
impl Clone for bgfx_transient_index_buffer {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_transient_index_buffer_t = bgfx_transient_index_buffer;
/**/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_transient_vertex_buffer {
    pub data: *mut u8,
    pub size: u32,
    pub startVertex: u32,
    pub stride: u16,
    pub handle: bgfx_vertex_buffer_handle_t,
    pub decl: bgfx_vertex_decl_handle_t,
}
#[test]
fn bindgen_test_layout_bgfx_transient_vertex_buffer() {
    assert_eq!(::std::mem::size_of::<bgfx_transient_vertex_buffer>() , 24usize
               , concat ! (
               "Size of: " , stringify ! ( bgfx_transient_vertex_buffer ) ));
    assert_eq! (::std::mem::align_of::<bgfx_transient_vertex_buffer>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( bgfx_transient_vertex_buffer )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_transient_vertex_buffer ) ) . data
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_transient_vertex_buffer ) , "::" , stringify ! ( data )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_transient_vertex_buffer ) ) . size
                as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_transient_vertex_buffer ) , "::" , stringify ! ( size )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_transient_vertex_buffer ) ) .
                startVertex as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_transient_vertex_buffer ) , "::" , stringify ! (
                startVertex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_transient_vertex_buffer ) ) . stride
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_transient_vertex_buffer ) , "::" , stringify ! ( stride )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_transient_vertex_buffer ) ) . handle
                as * const _ as usize } , 18usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_transient_vertex_buffer ) , "::" , stringify ! ( handle )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_transient_vertex_buffer ) ) . decl
                as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_transient_vertex_buffer ) , "::" , stringify ! ( decl )
                ));
}
impl Clone for bgfx_transient_vertex_buffer {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_transient_vertex_buffer_t = bgfx_transient_vertex_buffer;
/**/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_instance_data_buffer {
    pub data: *mut u8,
    pub size: u32,
    pub offset: u32,
    pub num: u32,
    pub stride: u16,
    pub handle: bgfx_vertex_buffer_handle_t,
}
#[test]
fn bindgen_test_layout_bgfx_instance_data_buffer() {
    assert_eq!(::std::mem::size_of::<bgfx_instance_data_buffer>() , 24usize ,
               concat ! (
               "Size of: " , stringify ! ( bgfx_instance_data_buffer ) ));
    assert_eq! (::std::mem::align_of::<bgfx_instance_data_buffer>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( bgfx_instance_data_buffer )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_instance_data_buffer ) ) . data as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_instance_data_buffer ) , "::" , stringify ! ( data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_instance_data_buffer ) ) . size as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_instance_data_buffer ) , "::" , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_instance_data_buffer ) ) . offset as
                * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_instance_data_buffer ) , "::" , stringify ! ( offset )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_instance_data_buffer ) ) . num as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_instance_data_buffer ) , "::" , stringify ! ( num ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_instance_data_buffer ) ) . stride as
                * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_instance_data_buffer ) , "::" , stringify ! ( stride )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_instance_data_buffer ) ) . handle as
                * const _ as usize } , 22usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_instance_data_buffer ) , "::" , stringify ! ( handle )
                ));
}
impl Clone for bgfx_instance_data_buffer {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_instance_data_buffer_t = bgfx_instance_data_buffer;
/**/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_texture_info {
    pub format: bgfx_texture_format_t,
    pub storageSize: u32,
    pub width: u16,
    pub height: u16,
    pub depth: u16,
    pub numLayers: u16,
    pub numMips: u8,
    pub bitsPerPixel: u8,
    pub cubeMap: bool,
}
#[test]
fn bindgen_test_layout_bgfx_texture_info() {
    assert_eq!(::std::mem::size_of::<bgfx_texture_info>() , 20usize , concat !
               ( "Size of: " , stringify ! ( bgfx_texture_info ) ));
    assert_eq! (::std::mem::align_of::<bgfx_texture_info>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( bgfx_texture_info ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_texture_info ) ) . format as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_texture_info ) ,
                "::" , stringify ! ( format ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_texture_info ) ) . storageSize as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_texture_info ) ,
                "::" , stringify ! ( storageSize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_texture_info ) ) . width as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_texture_info ) ,
                "::" , stringify ! ( width ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_texture_info ) ) . height as * const
                _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_texture_info ) ,
                "::" , stringify ! ( height ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_texture_info ) ) . depth as * const
                _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_texture_info ) ,
                "::" , stringify ! ( depth ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_texture_info ) ) . numLayers as *
                const _ as usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_texture_info ) ,
                "::" , stringify ! ( numLayers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_texture_info ) ) . numMips as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_texture_info ) ,
                "::" , stringify ! ( numMips ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_texture_info ) ) . bitsPerPixel as *
                const _ as usize } , 17usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_texture_info ) ,
                "::" , stringify ! ( bitsPerPixel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_texture_info ) ) . cubeMap as *
                const _ as usize } , 18usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_texture_info ) ,
                "::" , stringify ! ( cubeMap ) ));
}
impl Clone for bgfx_texture_info {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_texture_info_t = bgfx_texture_info;
/**/
#[repr(C)]
pub struct bgfx_uniform_info {
    pub name: [::std::os::raw::c_char; 256usize],
    pub type_: bgfx_uniform_type_t,
    pub num: u16,
}
#[test]
fn bindgen_test_layout_bgfx_uniform_info() {
    assert_eq!(::std::mem::size_of::<bgfx_uniform_info>() , 264usize , concat
               ! ( "Size of: " , stringify ! ( bgfx_uniform_info ) ));
    assert_eq! (::std::mem::align_of::<bgfx_uniform_info>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( bgfx_uniform_info ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_uniform_info ) ) . name as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_uniform_info ) ,
                "::" , stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_uniform_info ) ) . type_ as * const
                _ as usize } , 256usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_uniform_info ) ,
                "::" , stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_uniform_info ) ) . num as * const _
                as usize } , 260usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_uniform_info ) ,
                "::" , stringify ! ( num ) ));
}
pub type bgfx_uniform_info_t = bgfx_uniform_info;
/**/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_attachment {
    pub handle: bgfx_texture_handle_t,
    pub mip: u16,
    pub layer: u16,
}
#[test]
fn bindgen_test_layout_bgfx_attachment() {
    assert_eq!(::std::mem::size_of::<bgfx_attachment>() , 6usize , concat ! (
               "Size of: " , stringify ! ( bgfx_attachment ) ));
    assert_eq! (::std::mem::align_of::<bgfx_attachment>() , 2usize , concat !
                ( "Alignment of " , stringify ! ( bgfx_attachment ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_attachment ) ) . handle as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_attachment ) ,
                "::" , stringify ! ( handle ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_attachment ) ) . mip as * const _ as
                usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_attachment ) ,
                "::" , stringify ! ( mip ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_attachment ) ) . layer as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_attachment ) ,
                "::" , stringify ! ( layer ) ));
}
impl Clone for bgfx_attachment {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_attachment_t = bgfx_attachment;
/**/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_caps_gpu {
    pub vendorId: u16,
    pub deviceId: u16,
}
#[test]
fn bindgen_test_layout_bgfx_caps_gpu() {
    assert_eq!(::std::mem::size_of::<bgfx_caps_gpu>() , 4usize , concat ! (
               "Size of: " , stringify ! ( bgfx_caps_gpu ) ));
    assert_eq! (::std::mem::align_of::<bgfx_caps_gpu>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( bgfx_caps_gpu ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_gpu ) ) . vendorId as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_gpu ) , "::"
                , stringify ! ( vendorId ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_gpu ) ) . deviceId as * const _
                as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_gpu ) , "::"
                , stringify ! ( deviceId ) ));
}
impl Clone for bgfx_caps_gpu {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_caps_gpu_t = bgfx_caps_gpu;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_caps_limits {
    pub maxDrawCalls: u32,
    pub maxBlits: u32,
    pub maxTextureSize: u32,
    pub maxViews: u32,
    pub maxFrameBuffers: u32,
    pub maxFBAttachments: u32,
    pub maxPrograms: u32,
    pub maxShaders: u32,
    pub maxTextures: u32,
    pub maxTextureSamplers: u32,
    pub maxVertexDecls: u32,
    pub maxVertexStreams: u32,
    pub maxIndexBuffers: u32,
    pub maxVertexBuffers: u32,
    pub maxDynamicIndexBuffers: u32,
    pub maxDynamicVertexBuffers: u32,
    pub maxUniforms: u32,
    pub maxOcclusionQueries: u32,
}
#[test]
fn bindgen_test_layout_bgfx_caps_limits() {
    assert_eq!(::std::mem::size_of::<bgfx_caps_limits>() , 72usize , concat !
               ( "Size of: " , stringify ! ( bgfx_caps_limits ) ));
    assert_eq! (::std::mem::align_of::<bgfx_caps_limits>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( bgfx_caps_limits ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) . maxDrawCalls as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxDrawCalls ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) . maxBlits as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxBlits ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) . maxTextureSize as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxTextureSize ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) . maxViews as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxViews ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) . maxFrameBuffers as
                * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxFrameBuffers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) . maxFBAttachments
                as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxFBAttachments ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) . maxPrograms as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxPrograms ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) . maxShaders as *
                const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxShaders ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) . maxTextures as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxTextures ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) . maxTextureSamplers
                as * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxTextureSamplers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) . maxVertexDecls as
                * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxVertexDecls ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) . maxVertexStreams
                as * const _ as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxVertexStreams ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) . maxIndexBuffers as
                * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxIndexBuffers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) . maxVertexBuffers
                as * const _ as usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxVertexBuffers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) .
                maxDynamicIndexBuffers as * const _ as usize } , 56usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxDynamicIndexBuffers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) .
                maxDynamicVertexBuffers as * const _ as usize } , 60usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxDynamicVertexBuffers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) . maxUniforms as *
                const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxUniforms ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps_limits ) ) .
                maxOcclusionQueries as * const _ as usize } , 68usize , concat
                ! (
                "Alignment of field: " , stringify ! ( bgfx_caps_limits ) ,
                "::" , stringify ! ( maxOcclusionQueries ) ));
}
impl Clone for bgfx_caps_limits {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_caps_limits_t = bgfx_caps_limits;
/**/
#[repr(C)]
pub struct bgfx_caps {
    pub rendererType: bgfx_renderer_type_t,
    pub supported: u64,
    pub vendorId: u16,
    pub deviceId: u16,
    pub homogeneousDepth: bool,
    pub originBottomLeft: bool,
    pub numGPUs: u8,
    pub gpu: [bgfx_caps_gpu_t; 4usize],
    pub limits: bgfx_caps_limits_t,
    pub formats: [u16; 76usize],
}
#[test]
fn bindgen_test_layout_bgfx_caps() {
    assert_eq!(::std::mem::size_of::<bgfx_caps>() , 264usize , concat ! (
               "Size of: " , stringify ! ( bgfx_caps ) ));
    assert_eq! (::std::mem::align_of::<bgfx_caps>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( bgfx_caps ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps ) ) . rendererType as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps ) , "::" ,
                stringify ! ( rendererType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps ) ) . supported as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps ) , "::" ,
                stringify ! ( supported ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps ) ) . vendorId as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps ) , "::" ,
                stringify ! ( vendorId ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps ) ) . deviceId as * const _ as
                usize } , 18usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps ) , "::" ,
                stringify ! ( deviceId ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps ) ) . homogeneousDepth as *
                const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps ) , "::" ,
                stringify ! ( homogeneousDepth ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps ) ) . originBottomLeft as *
                const _ as usize } , 21usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps ) , "::" ,
                stringify ! ( originBottomLeft ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps ) ) . numGPUs as * const _ as
                usize } , 22usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps ) , "::" ,
                stringify ! ( numGPUs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps ) ) . gpu as * const _ as usize
                } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps ) , "::" ,
                stringify ! ( gpu ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps ) ) . limits as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps ) , "::" ,
                stringify ! ( limits ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_caps ) ) . formats as * const _ as
                usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_caps ) , "::" ,
                stringify ! ( formats ) ));
}
pub type bgfx_caps_t = bgfx_caps;
pub const BGFX_FATAL_DEBUG_CHECK: bgfx_fatal = 0;
pub const BGFX_FATAL_INVALID_SHADER: bgfx_fatal = 1;
pub const BGFX_FATAL_UNABLE_TO_INITIALIZE: bgfx_fatal = 2;
pub const BGFX_FATAL_UNABLE_TO_CREATE_TEXTURE: bgfx_fatal = 3;
pub const BGFX_FATAL_DEVICE_LOST: bgfx_fatal = 4;
pub const BGFX_FATAL_COUNT: bgfx_fatal = 5;
/**/
pub type bgfx_fatal = ::std::os::raw::c_int;
pub use self::bgfx_fatal as bgfx_fatal_t;
/**/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_callback_interface {
    pub vtbl: *const bgfx_callback_vtbl,
}
#[test]
fn bindgen_test_layout_bgfx_callback_interface() {
    assert_eq!(::std::mem::size_of::<bgfx_callback_interface>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( bgfx_callback_interface ) ));
    assert_eq! (::std::mem::align_of::<bgfx_callback_interface>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( bgfx_callback_interface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_callback_interface ) ) . vtbl as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_callback_interface
                ) , "::" , stringify ! ( vtbl ) ));
}
impl Clone for bgfx_callback_interface {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_callback_interface_t = bgfx_callback_interface;
/**/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_callback_vtbl {
    pub fatal: ::std::option::Option<unsafe extern "C" fn(_this:
                                                              *mut bgfx_callback_interface_t,
                                                          _code: bgfx_fatal_t,
                                                          _str:
                                                              *const ::std::os::raw::c_char)>,
    pub trace_vargs: ::std::option::Option<unsafe extern "C" fn(_this:
                                                                    *mut bgfx_callback_interface_t,
                                                                _filePath:
                                                                    *const ::std::os::raw::c_char,
                                                                _line: u16,
                                                                _format:
                                                                    *const ::std::os::raw::c_char,
                                                                _argList:
                                                                    va_list)>,
    pub cache_read_size: ::std::option::Option<unsafe extern "C" fn(_this:
                                                                        *mut bgfx_callback_interface_t,
                                                                    _id: u64)
                                                   -> u32>,
    pub cache_read: ::std::option::Option<unsafe extern "C" fn(_this:
                                                                   *mut bgfx_callback_interface_t,
                                                               _id: u64,
                                                               _data:
                                                                   *mut ::std::os::raw::c_void,
                                                               _size: u32)
                                              -> bool>,
    pub cache_write: ::std::option::Option<unsafe extern "C" fn(_this:
                                                                    *mut bgfx_callback_interface_t,
                                                                _id: u64,
                                                                _data:
                                                                    *const ::std::os::raw::c_void,
                                                                _size: u32)>,
    pub screen_shot: ::std::option::Option<unsafe extern "C" fn(_this:
                                                                    *mut bgfx_callback_interface_t,
                                                                _filePath:
                                                                    *const ::std::os::raw::c_char,
                                                                _width: u32,
                                                                _height: u32,
                                                                _pitch: u32,
                                                                _data:
                                                                    *const ::std::os::raw::c_void,
                                                                _size: u32,
                                                                _yflip:
                                                                    bool)>,
    pub capture_begin: ::std::option::Option<unsafe extern "C" fn(_this:
                                                                      *mut bgfx_callback_interface_t,
                                                                  _width: u32,
                                                                  _height:
                                                                      u32,
                                                                  _pitch: u32,
                                                                  _format:
                                                                      bgfx_texture_format_t,
                                                                  _yflip:
                                                                      bool)>,
    pub capture_end: ::std::option::Option<unsafe extern "C" fn(_this:
                                                                    *mut bgfx_callback_interface_t)>,
    pub capture_frame: ::std::option::Option<unsafe extern "C" fn(_this:
                                                                      *mut bgfx_callback_interface_t,
                                                                  _data:
                                                                      *const ::std::os::raw::c_void,
                                                                  _size:
                                                                      u32)>,
}
#[test]
fn bindgen_test_layout_bgfx_callback_vtbl() {
    assert_eq!(::std::mem::size_of::<bgfx_callback_vtbl>() , 72usize , concat
               ! ( "Size of: " , stringify ! ( bgfx_callback_vtbl ) ));
    assert_eq! (::std::mem::align_of::<bgfx_callback_vtbl>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( bgfx_callback_vtbl ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_callback_vtbl ) ) . fatal as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_callback_vtbl ) ,
                "::" , stringify ! ( fatal ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_callback_vtbl ) ) . trace_vargs as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_callback_vtbl ) ,
                "::" , stringify ! ( trace_vargs ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_callback_vtbl ) ) . cache_read_size
                as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_callback_vtbl ) ,
                "::" , stringify ! ( cache_read_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_callback_vtbl ) ) . cache_read as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_callback_vtbl ) ,
                "::" , stringify ! ( cache_read ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_callback_vtbl ) ) . cache_write as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_callback_vtbl ) ,
                "::" , stringify ! ( cache_write ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_callback_vtbl ) ) . screen_shot as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_callback_vtbl ) ,
                "::" , stringify ! ( screen_shot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_callback_vtbl ) ) . capture_begin as
                * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_callback_vtbl ) ,
                "::" , stringify ! ( capture_begin ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_callback_vtbl ) ) . capture_end as *
                const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_callback_vtbl ) ,
                "::" , stringify ! ( capture_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_callback_vtbl ) ) . capture_frame as
                * const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_callback_vtbl ) ,
                "::" , stringify ! ( capture_frame ) ));
}
impl Clone for bgfx_callback_vtbl {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_callback_vtbl_t = bgfx_callback_vtbl;
/**/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_allocator_interface {
    pub vtbl: *const bgfx_allocator_vtbl,
}
#[test]
fn bindgen_test_layout_bgfx_allocator_interface() {
    assert_eq!(::std::mem::size_of::<bgfx_allocator_interface>() , 8usize ,
               concat ! (
               "Size of: " , stringify ! ( bgfx_allocator_interface ) ));
    assert_eq! (::std::mem::align_of::<bgfx_allocator_interface>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( bgfx_allocator_interface ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_allocator_interface ) ) . vtbl as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                bgfx_allocator_interface ) , "::" , stringify ! ( vtbl ) ));
}
impl Clone for bgfx_allocator_interface {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_allocator_interface_t = bgfx_allocator_interface;
/**/
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_allocator_vtbl {
    pub realloc: ::std::option::Option<unsafe extern "C" fn(_this:
                                                                *mut bgfx_allocator_interface_t,
                                                            _ptr:
                                                                *mut ::std::os::raw::c_void,
                                                            _size: usize,
                                                            _align: usize,
                                                            _file:
                                                                *const ::std::os::raw::c_char,
                                                            _line: u32)
                                           -> *mut ::std::os::raw::c_void>,
}
#[test]
fn bindgen_test_layout_bgfx_allocator_vtbl() {
    assert_eq!(::std::mem::size_of::<bgfx_allocator_vtbl>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( bgfx_allocator_vtbl ) ));
    assert_eq! (::std::mem::align_of::<bgfx_allocator_vtbl>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( bgfx_allocator_vtbl ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_allocator_vtbl ) ) . realloc as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_allocator_vtbl ) ,
                "::" , stringify ! ( realloc ) ));
}
impl Clone for bgfx_allocator_vtbl {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_allocator_vtbl_t = bgfx_allocator_vtbl;
extern "C" {
    /**/
    pub fn bgfx_vertex_decl_begin(_decl: *mut bgfx_vertex_decl_t,
                                  _renderer: bgfx_renderer_type_t);
}
extern "C" {
    /**/
    pub fn bgfx_vertex_decl_add(_decl: *mut bgfx_vertex_decl_t,
                                _attrib: bgfx_attrib_t, _num: u8,
                                _type: bgfx_attrib_type_t, _normalized: bool,
                                _asInt: bool);
}
extern "C" {
    /**/
    pub fn bgfx_vertex_decl_skip(_decl: *mut bgfx_vertex_decl_t, _num: u8);
}
extern "C" {
    /**/
    pub fn bgfx_vertex_decl_end(_decl: *mut bgfx_vertex_decl_t);
}
extern "C" {
    /**/
    pub fn bgfx_vertex_pack(_input: *const f32, _inputNormalized: bool,
                            _attr: bgfx_attrib_t,
                            _decl: *const bgfx_vertex_decl_t,
                            _data: *mut ::std::os::raw::c_void, _index: u32);
}
extern "C" {
    /**/
    pub fn bgfx_vertex_unpack(_output: *mut f32, _attr: bgfx_attrib_t,
                              _decl: *const bgfx_vertex_decl_t,
                              _data: *const ::std::os::raw::c_void,
                              _index: u32);
}
extern "C" {
    /**/
    pub fn bgfx_vertex_convert(_destDecl: *const bgfx_vertex_decl_t,
                               _destData: *mut ::std::os::raw::c_void,
                               _srcDecl: *const bgfx_vertex_decl_t,
                               _srcData: *const ::std::os::raw::c_void,
                               _num: u32);
}
extern "C" {
    /**/
    pub fn bgfx_weld_vertices(_output: *mut u16,
                              _decl: *const bgfx_vertex_decl_t,
                              _data: *const ::std::os::raw::c_void, _num: u16,
                              _epsilon: f32) -> u16;
}
extern "C" {
    /**/
    pub fn bgfx_topology_convert(_conversion: bgfx_topology_convert_t,
                                 _dst: *mut ::std::os::raw::c_void,
                                 _dstSize: u32,
                                 _indices: *const ::std::os::raw::c_void,
                                 _numIndices: u32, _index32: bool) -> u32;
}
extern "C" {
    /**/
    pub fn bgfx_topology_sort_tri_list(_sort: bgfx_topology_sort_t,
                                       _dst: *mut ::std::os::raw::c_void,
                                       _dstSize: u32, _dir: *const f32,
                                       _pos: *const f32,
                                       _vertices:
                                           *const ::std::os::raw::c_void,
                                       _stride: u32,
                                       _indices:
                                           *const ::std::os::raw::c_void,
                                       _numIndices: u32, _index32: bool);
}
extern "C" {
    /**/
    pub fn bgfx_get_supported_renderers(_max: u8,
                                        _enum: *mut bgfx_renderer_type_t)
     -> u8;
}
extern "C" {
    /**/
    pub fn bgfx_get_renderer_name(_type: bgfx_renderer_type_t)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    /**/
    pub fn bgfx_init(_type: bgfx_renderer_type_t, _vendorId: u16,
                     _deviceId: u16,
                     _callback: *mut bgfx_callback_interface_t,
                     _allocator: *mut bgfx_allocator_interface_t) -> bool;
}
extern "C" {
    /**/
    pub fn bgfx_shutdown();
}
extern "C" {
    /**/
    pub fn bgfx_reset(_width: u32, _height: u32, _flags: u32);
}
extern "C" {
    /**/
    pub fn bgfx_frame(_capture: bool) -> u32;
}
extern "C" {
    /**/
    pub fn bgfx_get_renderer_type() -> bgfx_renderer_type_t;
}
extern "C" {
    /**/
    pub fn bgfx_get_caps() -> *const bgfx_caps_t;
}
extern "C" {
    /**/
    pub fn bgfx_get_hmd() -> *const bgfx_hmd_t;
}
extern "C" {
    /**/
    pub fn bgfx_get_stats() -> *const bgfx_stats_t;
}
extern "C" {
    /**/
    pub fn bgfx_alloc(_size: u32) -> *const bgfx_memory_t;
}
extern "C" {
    /**/
    pub fn bgfx_copy(_data: *const ::std::os::raw::c_void, _size: u32)
     -> *const bgfx_memory_t;
}
extern "C" {
    /**/
    pub fn bgfx_make_ref(_data: *const ::std::os::raw::c_void, _size: u32)
     -> *const bgfx_memory_t;
}
extern "C" {
    /**/
    pub fn bgfx_make_ref_release(_data: *const ::std::os::raw::c_void,
                                 _size: u32, _releaseFn: bgfx_release_fn_t,
                                 _userData: *mut ::std::os::raw::c_void)
     -> *const bgfx_memory_t;
}
extern "C" {
    /**/
    pub fn bgfx_set_debug(_debug: u32);
}
extern "C" {
    /**/
    pub fn bgfx_dbg_text_clear(_attr: u8, _small: bool);
}
extern "C" {
    /**/
    pub fn bgfx_dbg_text_printf(_x: u16, _y: u16, _attr: u8,
                                _format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    /**/
    pub fn bgfx_dbg_text_vprintf(_x: u16, _y: u16, _attr: u8,
                                 _format: *const ::std::os::raw::c_char,
                                 _argList: va_list);
}
extern "C" {
    /**/
    pub fn bgfx_dbg_text_image(_x: u16, _y: u16, _width: u16, _height: u16,
                               _data: *const ::std::os::raw::c_void,
                               _pitch: u16);
}
extern "C" {
    /**/
    pub fn bgfx_create_index_buffer(_mem: *const bgfx_memory_t, _flags: u16)
     -> bgfx_index_buffer_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_destroy_index_buffer(_handle: bgfx_index_buffer_handle_t);
}
extern "C" {
    /**/
    pub fn bgfx_create_vertex_buffer(_mem: *const bgfx_memory_t,
                                     _decl: *const bgfx_vertex_decl_t,
                                     _flags: u16)
     -> bgfx_vertex_buffer_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_destroy_vertex_buffer(_handle: bgfx_vertex_buffer_handle_t);
}
extern "C" {
    /**/
    pub fn bgfx_create_dynamic_index_buffer(_num: u32, _flags: u16)
     -> bgfx_dynamic_index_buffer_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_create_dynamic_index_buffer_mem(_mem: *const bgfx_memory_t,
                                                _flags: u16)
     -> bgfx_dynamic_index_buffer_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_update_dynamic_index_buffer(_handle:
                                                bgfx_dynamic_index_buffer_handle_t,
                                            _startIndex: u32,
                                            _mem: *const bgfx_memory_t);
}
extern "C" {
    /**/
    pub fn bgfx_destroy_dynamic_index_buffer(_handle:
                                                 bgfx_dynamic_index_buffer_handle_t);
}
extern "C" {
    /**/
    pub fn bgfx_create_dynamic_vertex_buffer(_num: u32,
                                             _decl: *const bgfx_vertex_decl_t,
                                             _flags: u16)
     -> bgfx_dynamic_vertex_buffer_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_create_dynamic_vertex_buffer_mem(_mem: *const bgfx_memory_t,
                                                 _decl:
                                                     *const bgfx_vertex_decl_t,
                                                 _flags: u16)
     -> bgfx_dynamic_vertex_buffer_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_update_dynamic_vertex_buffer(_handle:
                                                 bgfx_dynamic_vertex_buffer_handle_t,
                                             _startVertex: u32,
                                             _mem: *const bgfx_memory_t);
}
extern "C" {
    /**/
    pub fn bgfx_destroy_dynamic_vertex_buffer(_handle:
                                                  bgfx_dynamic_vertex_buffer_handle_t);
}
extern "C" {
    /**/
    pub fn bgfx_get_avail_transient_index_buffer(_num: u32) -> u32;
}
extern "C" {
    /**/
    pub fn bgfx_get_avail_transient_vertex_buffer(_num: u32,
                                                  _decl:
                                                      *const bgfx_vertex_decl_t)
     -> u32;
}
extern "C" {
    /**/
    pub fn bgfx_get_avail_instance_data_buffer(_num: u32, _stride: u16)
     -> u32;
}
extern "C" {
    /**/
    pub fn bgfx_alloc_transient_index_buffer(_tib:
                                                 *mut bgfx_transient_index_buffer_t,
                                             _num: u32);
}
extern "C" {
    /**/
    pub fn bgfx_alloc_transient_vertex_buffer(_tvb:
                                                  *mut bgfx_transient_vertex_buffer_t,
                                              _num: u32,
                                              _decl:
                                                  *const bgfx_vertex_decl_t);
}
extern "C" {
    /**/
    pub fn bgfx_alloc_transient_buffers(_tvb:
                                            *mut bgfx_transient_vertex_buffer_t,
                                        _decl: *const bgfx_vertex_decl_t,
                                        _numVertices: u32,
                                        _tib:
                                            *mut bgfx_transient_index_buffer_t,
                                        _numIndices: u32) -> bool;
}
extern "C" {
    /**/
    pub fn bgfx_alloc_instance_data_buffer(_num: u32, _stride: u16)
     -> *const bgfx_instance_data_buffer_t;
}
extern "C" {
    /**/
    pub fn bgfx_create_indirect_buffer(_num: u32)
     -> bgfx_indirect_buffer_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_destroy_indirect_buffer(_handle:
                                            bgfx_indirect_buffer_handle_t);
}
extern "C" {
    /**/
    pub fn bgfx_create_shader(_mem: *const bgfx_memory_t)
     -> bgfx_shader_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_get_shader_uniforms(_handle: bgfx_shader_handle_t,
                                    _uniforms: *mut bgfx_uniform_handle_t,
                                    _max: u16) -> u16;
}
extern "C" {
    /**/
    pub fn bgfx_get_uniform_info(_handle: bgfx_uniform_handle_t,
                                 _info: *mut bgfx_uniform_info_t);
}
extern "C" {
    /**/
    pub fn bgfx_destroy_shader(_handle: bgfx_shader_handle_t);
}
extern "C" {
    /**/
    pub fn bgfx_create_program(_vsh: bgfx_shader_handle_t,
                               _fsh: bgfx_shader_handle_t,
                               _destroyShaders: bool)
     -> bgfx_program_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_create_compute_program(_csh: bgfx_shader_handle_t,
                                       _destroyShaders: bool)
     -> bgfx_program_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_destroy_program(_handle: bgfx_program_handle_t);
}
extern "C" {
    /**/
    pub fn bgfx_is_texture_valid(_depth: u16, _cubeMap: bool, _numLayers: u16,
                                 _format: bgfx_texture_format_t, _flags: u32)
     -> bool;
}
extern "C" {
    /**/
    pub fn bgfx_calc_texture_size(_info: *mut bgfx_texture_info_t,
                                  _width: u16, _height: u16, _depth: u16,
                                  _cubeMap: bool, _hasMips: bool,
                                  _numLayers: u16,
                                  _format: bgfx_texture_format_t);
}
extern "C" {
    /**/
    pub fn bgfx_create_texture(_mem: *const bgfx_memory_t, _flags: u32,
                               _skip: u8, _info: *mut bgfx_texture_info_t)
     -> bgfx_texture_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_create_texture_2d(_width: u16, _height: u16, _hasMips: bool,
                                  _numLayers: u16,
                                  _format: bgfx_texture_format_t, _flags: u32,
                                  _mem: *const bgfx_memory_t)
     -> bgfx_texture_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_create_texture_2d_scaled(_ratio: bgfx_backbuffer_ratio_t,
                                         _hasMips: bool, _numLayers: u16,
                                         _format: bgfx_texture_format_t,
                                         _flags: u32)
     -> bgfx_texture_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_create_texture_3d(_width: u16, _height: u16, _depth: u16,
                                  _hasMips: bool,
                                  _format: bgfx_texture_format_t, _flags: u32,
                                  _mem: *const bgfx_memory_t)
     -> bgfx_texture_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_create_texture_cube(_size: u16, _hasMips: bool,
                                    _numLayers: u16,
                                    _format: bgfx_texture_format_t,
                                    _flags: u32, _mem: *const bgfx_memory_t)
     -> bgfx_texture_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_update_texture_2d(_handle: bgfx_texture_handle_t, _layer: u16,
                                  _mip: u8, _x: u16, _y: u16, _width: u16,
                                  _height: u16, _mem: *const bgfx_memory_t,
                                  _pitch: u16);
}
extern "C" {
    /**/
    pub fn bgfx_update_texture_3d(_handle: bgfx_texture_handle_t, _mip: u8,
                                  _x: u16, _y: u16, _z: u16, _width: u16,
                                  _height: u16, _depth: u16,
                                  _mem: *const bgfx_memory_t);
}
extern "C" {
    /**/
    pub fn bgfx_update_texture_cube(_handle: bgfx_texture_handle_t,
                                    _layer: u16, _side: u8, _mip: u8, _x: u16,
                                    _y: u16, _width: u16, _height: u16,
                                    _mem: *const bgfx_memory_t, _pitch: u16);
}
extern "C" {
    /**/
    pub fn bgfx_read_texture(_handle: bgfx_texture_handle_t,
                             _data: *mut ::std::os::raw::c_void, _mip: u8)
     -> u32;
}
extern "C" {
    /**/
    pub fn bgfx_destroy_texture(_handle: bgfx_texture_handle_t);
}
extern "C" {
    /**/
    pub fn bgfx_create_frame_buffer(_width: u16, _height: u16,
                                    _format: bgfx_texture_format_t,
                                    _textureFlags: u32)
     -> bgfx_frame_buffer_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_create_frame_buffer_scaled(_ratio: bgfx_backbuffer_ratio_t,
                                           _format: bgfx_texture_format_t,
                                           _textureFlags: u32)
     -> bgfx_frame_buffer_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_create_frame_buffer_from_handles(_num: u8,
                                                 _handles:
                                                     *const bgfx_texture_handle_t,
                                                 _destroyTextures: bool)
     -> bgfx_frame_buffer_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_create_frame_buffer_from_attachment(_num: u8,
                                                    _attachment:
                                                        *const bgfx_attachment_t,
                                                    _destroyTextures: bool)
     -> bgfx_frame_buffer_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_create_frame_buffer_from_nwh(_nwh:
                                                 *mut ::std::os::raw::c_void,
                                             _width: u16, _height: u16,
                                             _depthFormat:
                                                 bgfx_texture_format_t)
     -> bgfx_frame_buffer_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_get_texture(_handle: bgfx_frame_buffer_handle_t,
                            _attachment: u8) -> bgfx_texture_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_destroy_frame_buffer(_handle: bgfx_frame_buffer_handle_t);
}
extern "C" {
    /**/
    pub fn bgfx_create_uniform(_name: *const ::std::os::raw::c_char,
                               _type: bgfx_uniform_type_t, _num: u16)
     -> bgfx_uniform_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_destroy_uniform(_handle: bgfx_uniform_handle_t);
}
extern "C" {
    /**/
    pub fn bgfx_create_occlusion_query() -> bgfx_occlusion_query_handle_t;
}
extern "C" {
    /**/
    pub fn bgfx_get_result(_handle: bgfx_occlusion_query_handle_t,
                           _result: *mut i32)
     -> bgfx_occlusion_query_result_t;
}
extern "C" {
    /**/
    pub fn bgfx_destroy_occlusion_query(_handle:
                                            bgfx_occlusion_query_handle_t);
}
extern "C" {
    /**/
    pub fn bgfx_set_palette_color(_index: u8, _rgba: *const f32);
}
extern "C" {
    /**/
    pub fn bgfx_set_view_name(_id: u8, _name: *const ::std::os::raw::c_char);
}
extern "C" {
    /**/
    pub fn bgfx_set_view_rect(_id: u8, _x: u16, _y: u16, _width: u16,
                              _height: u16);
}
extern "C" {
    /**/
    pub fn bgfx_set_view_rect_auto(_id: u8, _x: u16, _y: u16,
                                   _ratio: bgfx_backbuffer_ratio_t);
}
extern "C" {
    /**/
    pub fn bgfx_set_view_scissor(_id: u8, _x: u16, _y: u16, _width: u16,
                                 _height: u16);
}
extern "C" {
    /**/
    pub fn bgfx_set_view_clear(_id: u8, _flags: u16, _rgba: u32, _depth: f32,
                               _stencil: u8);
}
extern "C" {
    /**/
    pub fn bgfx_set_view_clear_mrt(_id: u8, _flags: u16, _depth: f32,
                                   _stencil: u8, _0: u8, _1: u8, _2: u8,
                                   _3: u8, _4: u8, _5: u8, _6: u8, _7: u8);
}
extern "C" {
    /**/
    pub fn bgfx_set_view_seq(_id: u8, _enabled: bool);
}
extern "C" {
    /**/
    pub fn bgfx_set_view_frame_buffer(_id: u8,
                                      _handle: bgfx_frame_buffer_handle_t);
}
extern "C" {
    /**/
    pub fn bgfx_set_view_transform(_id: u8,
                                   _view: *const ::std::os::raw::c_void,
                                   _proj: *const ::std::os::raw::c_void);
}
extern "C" {
    /**/
    pub fn bgfx_set_view_transform_stereo(_id: u8,
                                          _view:
                                              *const ::std::os::raw::c_void,
                                          _projL:
                                              *const ::std::os::raw::c_void,
                                          _flags: u8,
                                          _projR:
                                              *const ::std::os::raw::c_void);
}
extern "C" {
    /**/
    pub fn bgfx_set_view_order(_id: u8, _num: u8,
                               _order: *const ::std::os::raw::c_void);
}
extern "C" {
    /**/
    pub fn bgfx_reset_view(_id: u8);
}
extern "C" {
    /**/
    pub fn bgfx_set_marker(_marker: *const ::std::os::raw::c_char);
}
extern "C" {
    /**/
    pub fn bgfx_set_state(_state: u64, _rgba: u32);
}
extern "C" {
    /**/
    pub fn bgfx_set_condition(_handle: bgfx_occlusion_query_handle_t,
                              _visible: bool);
}
extern "C" {
    /**/
    pub fn bgfx_set_stencil(_fstencil: u32, _bstencil: u32);
}
extern "C" {
    /**/
    pub fn bgfx_set_scissor(_x: u16, _y: u16, _width: u16, _height: u16)
     -> u16;
}
extern "C" {
    /**/
    pub fn bgfx_set_scissor_cached(_cache: u16);
}
extern "C" {
    /**/
    pub fn bgfx_set_transform(_mtx: *const ::std::os::raw::c_void, _num: u16)
     -> u32;
}
extern "C" {
    /**/
    pub fn bgfx_alloc_transform(_transform: *mut bgfx_transform_t, _num: u16)
     -> u32;
}
extern "C" {
    /**/
    pub fn bgfx_set_transform_cached(_cache: u32, _num: u16);
}
extern "C" {
    /**/
    pub fn bgfx_set_uniform(_handle: bgfx_uniform_handle_t,
                            _value: *const ::std::os::raw::c_void, _num: u16);
}
extern "C" {
    /**/
    pub fn bgfx_set_index_buffer(_handle: bgfx_index_buffer_handle_t,
                                 _firstIndex: u32, _numIndices: u32);
}
extern "C" {
    /**/
    pub fn bgfx_set_dynamic_index_buffer(_handle:
                                             bgfx_dynamic_index_buffer_handle_t,
                                         _firstIndex: u32, _numIndices: u32);
}
extern "C" {
    /**/
    pub fn bgfx_set_transient_index_buffer(_tib:
                                               *const bgfx_transient_index_buffer_t,
                                           _firstIndex: u32,
                                           _numIndices: u32);
}
extern "C" {
    /**/
    pub fn bgfx_set_vertex_buffer(_handle: bgfx_vertex_buffer_handle_t,
                                  _startVertex: u32, _numVertices: u32);
}
extern "C" {
    /**/
    pub fn bgfx_set_dynamic_vertex_buffer(_handle:
                                              bgfx_dynamic_vertex_buffer_handle_t,
                                          _startVertex: u32,
                                          _numVertices: u32);
}
extern "C" {
    /**/
    pub fn bgfx_set_transient_vertex_buffer(_tvb:
                                                *const bgfx_transient_vertex_buffer_t,
                                            _startVertex: u32,
                                            _numVertices: u32);
}
extern "C" {
    /**/
    pub fn bgfx_set_instance_data_buffer(_idb:
                                             *const bgfx_instance_data_buffer_t,
                                         _num: u32);
}
extern "C" {
    /**/
    pub fn bgfx_set_instance_data_from_vertex_buffer(_handle:
                                                         bgfx_vertex_buffer_handle_t,
                                                     _startVertex: u32,
                                                     _num: u32);
}
extern "C" {
    /**/
    pub fn bgfx_set_instance_data_from_dynamic_vertex_buffer(_handle:
                                                                 bgfx_dynamic_vertex_buffer_handle_t,
                                                             _startVertex:
                                                                 u32,
                                                             _num: u32);
}
extern "C" {
    /**/
    pub fn bgfx_set_texture(_stage: u8, _sampler: bgfx_uniform_handle_t,
                            _handle: bgfx_texture_handle_t, _flags: u32);
}
extern "C" {
    /**/
    pub fn bgfx_touch(_id: u8) -> u32;
}
extern "C" {
    /**/
    pub fn bgfx_submit(_id: u8, _handle: bgfx_program_handle_t, _depth: i32,
                       _preserveState: bool) -> u32;
}
extern "C" {
    /**/
    pub fn bgfx_submit_occlusion_query(_id: u8,
                                       _program: bgfx_program_handle_t,
                                       _occlusionQuery:
                                           bgfx_occlusion_query_handle_t,
                                       _depth: i32, _preserveState: bool)
     -> u32;
}
extern "C" {
    /**/
    pub fn bgfx_submit_indirect(_id: u8, _handle: bgfx_program_handle_t,
                                _indirectHandle:
                                    bgfx_indirect_buffer_handle_t,
                                _start: u16, _num: u16, _depth: i32,
                                _preserveState: bool) -> u32;
}
extern "C" {
    /**/
    pub fn bgfx_set_image(_stage: u8, _sampler: bgfx_uniform_handle_t,
                          _handle: bgfx_texture_handle_t, _mip: u8,
                          _access: bgfx_access_t,
                          _format: bgfx_texture_format_t);
}
extern "C" {
    /**/
    pub fn bgfx_set_compute_index_buffer(_stage: u8,
                                         _handle: bgfx_index_buffer_handle_t,
                                         _access: bgfx_access_t);
}
extern "C" {
    /**/
    pub fn bgfx_set_compute_vertex_buffer(_stage: u8,
                                          _handle:
                                              bgfx_vertex_buffer_handle_t,
                                          _access: bgfx_access_t);
}
extern "C" {
    /**/
    pub fn bgfx_set_compute_dynamic_index_buffer(_stage: u8,
                                                 _handle:
                                                     bgfx_dynamic_index_buffer_handle_t,
                                                 _access: bgfx_access_t);
}
extern "C" {
    /**/
    pub fn bgfx_set_compute_dynamic_vertex_buffer(_stage: u8,
                                                  _handle:
                                                      bgfx_dynamic_vertex_buffer_handle_t,
                                                  _access: bgfx_access_t);
}
extern "C" {
    /**/
    pub fn bgfx_set_compute_indirect_buffer(_stage: u8,
                                            _handle:
                                                bgfx_indirect_buffer_handle_t,
                                            _access: bgfx_access_t);
}
extern "C" {
    /**/
    pub fn bgfx_dispatch(_id: u8, _handle: bgfx_program_handle_t, _numX: u16,
                         _numY: u16, _numZ: u16, _flags: u8) -> u32;
}
extern "C" {
    /**/
    pub fn bgfx_dispatch_indirect(_id: u8, _handle: bgfx_program_handle_t,
                                  _indirectHandle:
                                      bgfx_indirect_buffer_handle_t,
                                  _start: u16, _num: u16, _flags: u8) -> u32;
}
extern "C" {
    /**/
    pub fn bgfx_discard();
}
extern "C" {
    /**/
    pub fn bgfx_blit(_id: u8, _dst: bgfx_texture_handle_t, _dstMip: u8,
                     _dstX: u16, _dstY: u16, _dstZ: u16,
                     _src: bgfx_texture_handle_t, _srcMip: u8, _srcX: u16,
                     _srcY: u16, _srcZ: u16, _width: u16, _height: u16,
                     _depth: u16);
}
extern "C" {
    /**/
    pub fn bgfx_request_screen_shot(_handle: bgfx_frame_buffer_handle_t,
                                    _filePath: *const ::std::os::raw::c_char);
}
pub const BGFX_RENDER_FRAME_NO_CONTEXT: bgfx_render_frame = 0;
pub const BGFX_RENDER_FRAME_RENDER: bgfx_render_frame = 1;
pub const BGFX_RENDER_FRAME_TIMEOUT: bgfx_render_frame = 2;
pub const BGFX_RENDER_FRAME_EXITING: bgfx_render_frame = 3;
pub const BGFX_RENDER_FRAME_COUNT: bgfx_render_frame = 4;
pub type bgfx_render_frame = ::std::os::raw::c_int;
pub use self::bgfx_render_frame as bgfx_render_frame_t;
extern "C" {
    /**
 * WARNING: This call should be only used on platforms that don't
 * allow creating separate rendering thread. If it is called before
 * to bgfx_init, render thread won't be created by bgfx_init call.
 */
    pub fn bgfx_render_frame() -> bgfx_render_frame_t;
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_platform_data {
    pub ndt: *mut ::std::os::raw::c_void,
    pub nwh: *mut ::std::os::raw::c_void,
    pub context: *mut ::std::os::raw::c_void,
    pub backBuffer: *mut ::std::os::raw::c_void,
    pub backBufferDS: *mut ::std::os::raw::c_void,
    pub session: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_bgfx_platform_data() {
    assert_eq!(::std::mem::size_of::<bgfx_platform_data>() , 48usize , concat
               ! ( "Size of: " , stringify ! ( bgfx_platform_data ) ));
    assert_eq! (::std::mem::align_of::<bgfx_platform_data>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( bgfx_platform_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_platform_data ) ) . ndt as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_platform_data ) ,
                "::" , stringify ! ( ndt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_platform_data ) ) . nwh as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_platform_data ) ,
                "::" , stringify ! ( nwh ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_platform_data ) ) . context as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_platform_data ) ,
                "::" , stringify ! ( context ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_platform_data ) ) . backBuffer as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_platform_data ) ,
                "::" , stringify ! ( backBuffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_platform_data ) ) . backBufferDS as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_platform_data ) ,
                "::" , stringify ! ( backBufferDS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_platform_data ) ) . session as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_platform_data ) ,
                "::" , stringify ! ( session ) ));
}
impl Clone for bgfx_platform_data {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_platform_data_t = bgfx_platform_data;
extern "C" {
    /**/
    pub fn bgfx_set_platform_data(_data: *const bgfx_platform_data_t);
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct bgfx_internal_data {
    pub caps: *const bgfx_caps,
    pub context: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_bgfx_internal_data() {
    assert_eq!(::std::mem::size_of::<bgfx_internal_data>() , 16usize , concat
               ! ( "Size of: " , stringify ! ( bgfx_internal_data ) ));
    assert_eq! (::std::mem::align_of::<bgfx_internal_data>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( bgfx_internal_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_internal_data ) ) . caps as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_internal_data ) ,
                "::" , stringify ! ( caps ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_internal_data ) ) . context as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_internal_data ) ,
                "::" , stringify ! ( context ) ));
}
impl Clone for bgfx_internal_data {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_internal_data_t = bgfx_internal_data;
extern "C" {
    /**/
    pub fn bgfx_get_internal_data() -> *const bgfx_internal_data_t;
}
extern "C" {
    /**/
    pub fn bgfx_override_internal_texture_ptr(_handle: bgfx_texture_handle_t,
                                              _ptr: usize) -> usize;
}
extern "C" {
    /**/
    pub fn bgfx_override_internal_texture(_handle: bgfx_texture_handle_t,
                                          _width: u16, _height: u16,
                                          _numMips: u8,
                                          _format: bgfx_texture_format_t,
                                          _flags: u32) -> usize;
}
/**/
#[repr(C)]
#[derive(Copy)]
pub struct bgfx_interface_vtbl {
    pub render_frame: ::std::option::Option<unsafe extern "C" fn()
                                                -> bgfx_render_frame_t>,
    pub set_platform_data: ::std::option::Option<unsafe extern "C" fn(_data:
                                                                          *const bgfx_platform_data_t)>,
    pub get_internal_data: ::std::option::Option<unsafe extern "C" fn()
                                                     ->
                                                         *const bgfx_internal_data_t>,
    pub override_internal_texture_ptr: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                                      bgfx_texture_handle_t,
                                                                                  _ptr:
                                                                                      usize)
                                                                 -> usize>,
    pub override_internal_texture: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                                  bgfx_texture_handle_t,
                                                                              _width:
                                                                                  u16,
                                                                              _height:
                                                                                  u16,
                                                                              _numMips:
                                                                                  u8,
                                                                              _format:
                                                                                  bgfx_texture_format_t,
                                                                              _flags:
                                                                                  u32)
                                                             -> usize>,
    pub vertex_decl_begin: ::std::option::Option<unsafe extern "C" fn(_decl:
                                                                          *mut bgfx_vertex_decl_t,
                                                                      _renderer:
                                                                          bgfx_renderer_type_t)>,
    pub vertex_decl_add: ::std::option::Option<unsafe extern "C" fn(_decl:
                                                                        *mut bgfx_vertex_decl_t,
                                                                    _attrib:
                                                                        bgfx_attrib_t,
                                                                    _num: u8,
                                                                    _type:
                                                                        bgfx_attrib_type_t,
                                                                    _normalized:
                                                                        bool,
                                                                    _asInt:
                                                                        bool)>,
    pub vertex_decl_skip: ::std::option::Option<unsafe extern "C" fn(_decl:
                                                                         *mut bgfx_vertex_decl_t,
                                                                     _num:
                                                                         u8)>,
    pub vertex_decl_end: ::std::option::Option<unsafe extern "C" fn(_decl:
                                                                        *mut bgfx_vertex_decl_t)>,
    pub vertex_pack: ::std::option::Option<unsafe extern "C" fn(_input:
                                                                    *const f32,
                                                                _inputNormalized:
                                                                    bool,
                                                                _attr:
                                                                    bgfx_attrib_t,
                                                                _decl:
                                                                    *const bgfx_vertex_decl_t,
                                                                _data:
                                                                    *mut ::std::os::raw::c_void,
                                                                _index: u32)>,
    pub vertex_unpack: ::std::option::Option<unsafe extern "C" fn(_output:
                                                                      *mut f32,
                                                                  _attr:
                                                                      bgfx_attrib_t,
                                                                  _decl:
                                                                      *const bgfx_vertex_decl_t,
                                                                  _data:
                                                                      *const ::std::os::raw::c_void,
                                                                  _index:
                                                                      u32)>,
    pub vertex_convert: ::std::option::Option<unsafe extern "C" fn(_destDecl:
                                                                       *const bgfx_vertex_decl_t,
                                                                   _destData:
                                                                       *mut ::std::os::raw::c_void,
                                                                   _srcDecl:
                                                                       *const bgfx_vertex_decl_t,
                                                                   _srcData:
                                                                       *const ::std::os::raw::c_void,
                                                                   _num:
                                                                       u32)>,
    pub weld_vertices: ::std::option::Option<unsafe extern "C" fn(_output:
                                                                      *mut u16,
                                                                  _decl:
                                                                      *const bgfx_vertex_decl_t,
                                                                  _data:
                                                                      *const ::std::os::raw::c_void,
                                                                  _num: u16,
                                                                  _epsilon:
                                                                      f32)
                                                 -> u16>,
    pub topology_convert: ::std::option::Option<unsafe extern "C" fn(_conversion:
                                                                         bgfx_topology_convert_t,
                                                                     _dst:
                                                                         *mut ::std::os::raw::c_void,
                                                                     _dstSize:
                                                                         u32,
                                                                     _indices:
                                                                         *const ::std::os::raw::c_void,
                                                                     _numIndices:
                                                                         u32,
                                                                     _index32:
                                                                         bool)
                                                    -> u32>,
    pub topology_sort_tri_list: ::std::option::Option<unsafe extern "C" fn(_sort:
                                                                               bgfx_topology_sort_t,
                                                                           _dst:
                                                                               *mut ::std::os::raw::c_void,
                                                                           _dstSize:
                                                                               u32,
                                                                           _dir:
                                                                               *const f32,
                                                                           _pos:
                                                                               *const f32,
                                                                           _vertices:
                                                                               *const ::std::os::raw::c_void,
                                                                           _stride:
                                                                               u32,
                                                                           _indices:
                                                                               *const ::std::os::raw::c_void,
                                                                           _numIndices:
                                                                               u32,
                                                                           _index32:
                                                                               bool)>,
    pub get_supported_renderers: ::std::option::Option<unsafe extern "C" fn(_max:
                                                                                u8,
                                                                            _enum:
                                                                                *mut bgfx_renderer_type_t)
                                                           -> u8>,
    pub get_renderer_name: ::std::option::Option<unsafe extern "C" fn(_type:
                                                                          bgfx_renderer_type_t)
                                                     ->
                                                         *const ::std::os::raw::c_char>,
    pub init: ::std::option::Option<unsafe extern "C" fn(_type:
                                                             bgfx_renderer_type_t,
                                                         _vendorId: u16,
                                                         _deviceId: u16,
                                                         _callback:
                                                             *mut bgfx_callback_interface_t,
                                                         _allocator:
                                                             *mut bgfx_allocator_interface_t)
                                        -> bool>,
    pub shutdown: ::std::option::Option<unsafe extern "C" fn()>,
    pub reset: ::std::option::Option<unsafe extern "C" fn(_width: u32,
                                                          _height: u32,
                                                          _flags: u32)>,
    pub frame: ::std::option::Option<unsafe extern "C" fn(_capture: bool)
                                         -> u32>,
    pub get_renderer_type: ::std::option::Option<unsafe extern "C" fn()
                                                     -> bgfx_renderer_type_t>,
    pub get_caps: ::std::option::Option<unsafe extern "C" fn()
                                            -> *const bgfx_caps_t>,
    pub get_hmd: ::std::option::Option<unsafe extern "C" fn()
                                           -> *const bgfx_hmd_t>,
    pub get_stats: ::std::option::Option<unsafe extern "C" fn()
                                             -> *const bgfx_stats_t>,
    pub alloc: ::std::option::Option<unsafe extern "C" fn(_size: u32)
                                         -> *const bgfx_memory_t>,
    pub copy: ::std::option::Option<unsafe extern "C" fn(_data:
                                                             *const ::std::os::raw::c_void,
                                                         _size: u32)
                                        -> *const bgfx_memory_t>,
    pub make_ref: ::std::option::Option<unsafe extern "C" fn(_data:
                                                                 *const ::std::os::raw::c_void,
                                                             _size: u32)
                                            -> *const bgfx_memory_t>,
    pub make_ref_release: ::std::option::Option<unsafe extern "C" fn(_data:
                                                                         *const ::std::os::raw::c_void,
                                                                     _size:
                                                                         u32,
                                                                     _releaseFn:
                                                                         bgfx_release_fn_t,
                                                                     _userData:
                                                                         *mut ::std::os::raw::c_void)
                                                    -> *const bgfx_memory_t>,
    pub set_debug: ::std::option::Option<unsafe extern "C" fn(_debug: u32)>,
    pub dbg_text_clear: ::std::option::Option<unsafe extern "C" fn(_attr: u8,
                                                                   _small:
                                                                       bool)>,
    pub dbg_text_printf: ::std::option::Option<unsafe extern "C" fn(_x: u16,
                                                                    _y: u16,
                                                                    _attr: u8,
                                                                    _format:
                                                                        *const ::std::os::raw::c_char, ...)>,
    pub dbg_text_vprintf: ::std::option::Option<unsafe extern "C" fn(_x: u16,
                                                                     _y: u16,
                                                                     _attr:
                                                                         u8,
                                                                     _format:
                                                                         *const ::std::os::raw::c_char,
                                                                     _argList:
                                                                         va_list)>,
    pub dbg_text_image: ::std::option::Option<unsafe extern "C" fn(_x: u16,
                                                                   _y: u16,
                                                                   _width:
                                                                       u16,
                                                                   _height:
                                                                       u16,
                                                                   _data:
                                                                       *const ::std::os::raw::c_void,
                                                                   _pitch:
                                                                       u16)>,
    pub create_index_buffer: ::std::option::Option<unsafe extern "C" fn(_mem:
                                                                            *const bgfx_memory_t,
                                                                        _flags:
                                                                            u16)
                                                       ->
                                                           bgfx_index_buffer_handle_t>,
    pub destroy_index_buffer: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                             bgfx_index_buffer_handle_t)>,
    pub create_vertex_buffer: ::std::option::Option<unsafe extern "C" fn(_mem:
                                                                             *const bgfx_memory_t,
                                                                         _decl:
                                                                             *const bgfx_vertex_decl_t,
                                                                         _flags:
                                                                             u16)
                                                        ->
                                                            bgfx_vertex_buffer_handle_t>,
    pub destroy_vertex_buffer: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                              bgfx_vertex_buffer_handle_t)>,
    pub create_dynamic_index_buffer: ::std::option::Option<unsafe extern "C" fn(_num:
                                                                                    u32,
                                                                                _flags:
                                                                                    u16)
                                                               ->
                                                                   bgfx_dynamic_index_buffer_handle_t>,
    pub create_dynamic_index_buffer_mem: ::std::option::Option<unsafe extern "C" fn(_mem:
                                                                                        *const bgfx_memory_t,
                                                                                    _flags:
                                                                                        u16)
                                                                   ->
                                                                       bgfx_dynamic_index_buffer_handle_t>,
    pub update_dynamic_index_buffer: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                                    bgfx_dynamic_index_buffer_handle_t,
                                                                                _startIndex:
                                                                                    u32,
                                                                                _mem:
                                                                                    *const bgfx_memory_t)>,
    pub destroy_dynamic_index_buffer: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                                     bgfx_dynamic_index_buffer_handle_t)>,
    pub create_dynamic_vertex_buffer: ::std::option::Option<unsafe extern "C" fn(_num:
                                                                                     u32,
                                                                                 _decl:
                                                                                     *const bgfx_vertex_decl_t,
                                                                                 _flags:
                                                                                     u16)
                                                                ->
                                                                    bgfx_dynamic_vertex_buffer_handle_t>,
    pub create_dynamic_vertex_buffer_mem: ::std::option::Option<unsafe extern "C" fn(_mem:
                                                                                         *const bgfx_memory_t,
                                                                                     _decl:
                                                                                         *const bgfx_vertex_decl_t,
                                                                                     _flags:
                                                                                         u16)
                                                                    ->
                                                                        bgfx_dynamic_vertex_buffer_handle_t>,
    pub update_dynamic_vertex_buffer: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                                     bgfx_dynamic_vertex_buffer_handle_t,
                                                                                 _startVertex:
                                                                                     u32,
                                                                                 _mem:
                                                                                     *const bgfx_memory_t)>,
    pub destroy_dynamic_vertex_buffer: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                                      bgfx_dynamic_vertex_buffer_handle_t)>,
    pub get_avail_transient_index_buffer: ::std::option::Option<unsafe extern "C" fn(_num:
                                                                                         u32)
                                                                    -> u32>,
    pub get_avail_transient_vertex_buffer: ::std::option::Option<unsafe extern "C" fn(_num:
                                                                                          u32,
                                                                                      _decl:
                                                                                          *const bgfx_vertex_decl_t)
                                                                     -> u32>,
    pub get_avail_instance_data_buffer: ::std::option::Option<unsafe extern "C" fn(_num:
                                                                                       u32,
                                                                                   _stride:
                                                                                       u16)
                                                                  -> u32>,
    pub alloc_transient_index_buffer: ::std::option::Option<unsafe extern "C" fn(_tib:
                                                                                     *mut bgfx_transient_index_buffer_t,
                                                                                 _num:
                                                                                     u32)>,
    pub alloc_transient_vertex_buffer: ::std::option::Option<unsafe extern "C" fn(_tvb:
                                                                                      *mut bgfx_transient_vertex_buffer_t,
                                                                                  _num:
                                                                                      u32,
                                                                                  _decl:
                                                                                      *const bgfx_vertex_decl_t)>,
    pub alloc_transient_buffers: ::std::option::Option<unsafe extern "C" fn(_tvb:
                                                                                *mut bgfx_transient_vertex_buffer_t,
                                                                            _decl:
                                                                                *const bgfx_vertex_decl_t,
                                                                            _numVertices:
                                                                                u32,
                                                                            _tib:
                                                                                *mut bgfx_transient_index_buffer_t,
                                                                            _numIndices:
                                                                                u32)
                                                           -> bool>,
    pub alloc_instance_data_buffer: ::std::option::Option<unsafe extern "C" fn(_num:
                                                                                   u32,
                                                                               _stride:
                                                                                   u16)
                                                              ->
                                                                  *const bgfx_instance_data_buffer_t>,
    pub create_indirect_buffer: ::std::option::Option<unsafe extern "C" fn(_num:
                                                                               u32)
                                                          ->
                                                              bgfx_indirect_buffer_handle_t>,
    pub destroy_indirect_buffer: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                                bgfx_indirect_buffer_handle_t)>,
    pub create_shader: ::std::option::Option<unsafe extern "C" fn(_mem:
                                                                      *const bgfx_memory_t)
                                                 -> bgfx_shader_handle_t>,
    pub get_shader_uniforms: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                            bgfx_shader_handle_t,
                                                                        _uniforms:
                                                                            *mut bgfx_uniform_handle_t,
                                                                        _max:
                                                                            u16)
                                                       -> u16>,
    pub destroy_shader: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                       bgfx_shader_handle_t)>,
    pub create_program: ::std::option::Option<unsafe extern "C" fn(_vsh:
                                                                       bgfx_shader_handle_t,
                                                                   _fsh:
                                                                       bgfx_shader_handle_t,
                                                                   _destroyShaders:
                                                                       bool)
                                                  -> bgfx_program_handle_t>,
    pub create_compute_program: ::std::option::Option<unsafe extern "C" fn(_csh:
                                                                               bgfx_shader_handle_t,
                                                                           _destroyShaders:
                                                                               bool)
                                                          ->
                                                              bgfx_program_handle_t>,
    pub destroy_program: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                        bgfx_program_handle_t)>,
    pub is_texture_valid: ::std::option::Option<unsafe extern "C" fn(_depth:
                                                                         u16,
                                                                     _cubeMap:
                                                                         bool,
                                                                     _numLayers:
                                                                         u16,
                                                                     _format:
                                                                         bgfx_texture_format_t,
                                                                     _flags:
                                                                         u32)
                                                    -> bool>,
    pub calc_texture_size: ::std::option::Option<unsafe extern "C" fn(_info:
                                                                          *mut bgfx_texture_info_t,
                                                                      _width:
                                                                          u16,
                                                                      _height:
                                                                          u16,
                                                                      _depth:
                                                                          u16,
                                                                      _cubeMap:
                                                                          bool,
                                                                      _hasMips:
                                                                          bool,
                                                                      _numLayers:
                                                                          u16,
                                                                      _format:
                                                                          bgfx_texture_format_t)>,
    pub create_texture: ::std::option::Option<unsafe extern "C" fn(_mem:
                                                                       *const bgfx_memory_t,
                                                                   _flags:
                                                                       u32,
                                                                   _skip: u8,
                                                                   _info:
                                                                       *mut bgfx_texture_info_t)
                                                  -> bgfx_texture_handle_t>,
    pub create_texture_2d: ::std::option::Option<unsafe extern "C" fn(_width:
                                                                          u16,
                                                                      _height:
                                                                          u16,
                                                                      _hasMips:
                                                                          bool,
                                                                      _numLayers:
                                                                          u16,
                                                                      _format:
                                                                          bgfx_texture_format_t,
                                                                      _flags:
                                                                          u32,
                                                                      _mem:
                                                                          *const bgfx_memory_t)
                                                     ->
                                                         bgfx_texture_handle_t>,
    pub create_texture_2d_scaled: ::std::option::Option<unsafe extern "C" fn(_ratio:
                                                                                 bgfx_backbuffer_ratio_t,
                                                                             _hasMips:
                                                                                 bool,
                                                                             _numLayers:
                                                                                 u16,
                                                                             _format:
                                                                                 bgfx_texture_format_t,
                                                                             _flags:
                                                                                 u32)
                                                            ->
                                                                bgfx_texture_handle_t>,
    pub create_texture_3d: ::std::option::Option<unsafe extern "C" fn(_width:
                                                                          u16,
                                                                      _height:
                                                                          u16,
                                                                      _depth:
                                                                          u16,
                                                                      _hasMips:
                                                                          bool,
                                                                      _format:
                                                                          bgfx_texture_format_t,
                                                                      _flags:
                                                                          u32,
                                                                      _mem:
                                                                          *const bgfx_memory_t)
                                                     ->
                                                         bgfx_texture_handle_t>,
    pub create_texture_cube: ::std::option::Option<unsafe extern "C" fn(_size:
                                                                            u16,
                                                                        _hasMips:
                                                                            bool,
                                                                        _numLayers:
                                                                            u16,
                                                                        _format:
                                                                            bgfx_texture_format_t,
                                                                        _flags:
                                                                            u32,
                                                                        _mem:
                                                                            *const bgfx_memory_t)
                                                       ->
                                                           bgfx_texture_handle_t>,
    pub update_texture_2d: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                          bgfx_texture_handle_t,
                                                                      _layer:
                                                                          u16,
                                                                      _mip:
                                                                          u8,
                                                                      _x: u16,
                                                                      _y: u16,
                                                                      _width:
                                                                          u16,
                                                                      _height:
                                                                          u16,
                                                                      _mem:
                                                                          *const bgfx_memory_t,
                                                                      _pitch:
                                                                          u16)>,
    pub update_texture_3d: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                          bgfx_texture_handle_t,
                                                                      _mip:
                                                                          u8,
                                                                      _x: u16,
                                                                      _y: u16,
                                                                      _z: u16,
                                                                      _width:
                                                                          u16,
                                                                      _height:
                                                                          u16,
                                                                      _depth:
                                                                          u16,
                                                                      _mem:
                                                                          *const bgfx_memory_t)>,
    pub update_texture_cube: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                            bgfx_texture_handle_t,
                                                                        _layer:
                                                                            u16,
                                                                        _side:
                                                                            u8,
                                                                        _mip:
                                                                            u8,
                                                                        _x:
                                                                            u16,
                                                                        _y:
                                                                            u16,
                                                                        _width:
                                                                            u16,
                                                                        _height:
                                                                            u16,
                                                                        _mem:
                                                                            *const bgfx_memory_t,
                                                                        _pitch:
                                                                            u16)>,
    pub read_texture: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                     bgfx_texture_handle_t,
                                                                 _data:
                                                                     *mut ::std::os::raw::c_void,
                                                                 _mip: u8)
                                                -> u32>,
    pub destroy_texture: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                        bgfx_texture_handle_t)>,
    pub create_frame_buffer: ::std::option::Option<unsafe extern "C" fn(_width:
                                                                            u16,
                                                                        _height:
                                                                            u16,
                                                                        _format:
                                                                            bgfx_texture_format_t,
                                                                        _textureFlags:
                                                                            u32)
                                                       ->
                                                           bgfx_frame_buffer_handle_t>,
    pub create_frame_buffer_scaled: ::std::option::Option<unsafe extern "C" fn(_ratio:
                                                                                   bgfx_backbuffer_ratio_t,
                                                                               _format:
                                                                                   bgfx_texture_format_t,
                                                                               _textureFlags:
                                                                                   u32)
                                                              ->
                                                                  bgfx_frame_buffer_handle_t>,
    pub create_frame_buffer_from_attachment: ::std::option::Option<unsafe extern "C" fn(_num:
                                                                                            u8,
                                                                                        _attachment:
                                                                                            *const bgfx_attachment_t,
                                                                                        _destroyTextures:
                                                                                            bool)
                                                                       ->
                                                                           bgfx_frame_buffer_handle_t>,
    pub create_frame_buffer_from_nwh: ::std::option::Option<unsafe extern "C" fn(_nwh:
                                                                                     *mut ::std::os::raw::c_void,
                                                                                 _width:
                                                                                     u16,
                                                                                 _height:
                                                                                     u16,
                                                                                 _depthFormat:
                                                                                     bgfx_texture_format_t)
                                                                ->
                                                                    bgfx_frame_buffer_handle_t>,
    pub get_texture: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                    bgfx_frame_buffer_handle_t,
                                                                _attachment:
                                                                    u8)
                                               -> bgfx_texture_handle_t>,
    pub destroy_frame_buffer: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                             bgfx_frame_buffer_handle_t)>,
    pub create_uniform: ::std::option::Option<unsafe extern "C" fn(_name:
                                                                       *const ::std::os::raw::c_char,
                                                                   _type:
                                                                       bgfx_uniform_type_t,
                                                                   _num: u16)
                                                  -> bgfx_uniform_handle_t>,
    pub get_uniform_info: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                         bgfx_uniform_handle_t,
                                                                     _info:
                                                                         *mut bgfx_uniform_info_t)>,
    pub destroy_uniform: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                        bgfx_uniform_handle_t)>,
    pub create_occlusion_query: ::std::option::Option<unsafe extern "C" fn()
                                                          ->
                                                              bgfx_occlusion_query_handle_t>,
    pub get_result: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                   bgfx_occlusion_query_handle_t,
                                                               _result:
                                                                   *mut i32)
                                              ->
                                                  bgfx_occlusion_query_result_t>,
    pub destroy_occlusion_query: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                                bgfx_occlusion_query_handle_t)>,
    pub set_palette_color: ::std::option::Option<unsafe extern "C" fn(_index:
                                                                          u8,
                                                                      _rgba:
                                                                          *const f32)>,
    pub set_view_name: ::std::option::Option<unsafe extern "C" fn(_id: u8,
                                                                  _name:
                                                                      *const ::std::os::raw::c_char)>,
    pub set_view_rect: ::std::option::Option<unsafe extern "C" fn(_id: u8,
                                                                  _x: u16,
                                                                  _y: u16,
                                                                  _width: u16,
                                                                  _height:
                                                                      u16)>,
    pub set_view_scissor: ::std::option::Option<unsafe extern "C" fn(_id: u8,
                                                                     _x: u16,
                                                                     _y: u16,
                                                                     _width:
                                                                         u16,
                                                                     _height:
                                                                         u16)>,
    pub set_view_clear: ::std::option::Option<unsafe extern "C" fn(_id: u8,
                                                                   _flags:
                                                                       u16,
                                                                   _rgba: u32,
                                                                   _depth:
                                                                       f32,
                                                                   _stencil:
                                                                       u8)>,
    pub set_view_clear_mrt: ::std::option::Option<unsafe extern "C" fn(_id:
                                                                           u8,
                                                                       _flags:
                                                                           u16,
                                                                       _depth:
                                                                           f32,
                                                                       _stencil:
                                                                           u8,
                                                                       _0: u8,
                                                                       _1: u8,
                                                                       _2: u8,
                                                                       _3: u8,
                                                                       _4: u8,
                                                                       _5: u8,
                                                                       _6: u8,
                                                                       _7:
                                                                           u8)>,
    pub set_view_seq: ::std::option::Option<unsafe extern "C" fn(_id: u8,
                                                                 _enabled:
                                                                     bool)>,
    pub set_view_frame_buffer: ::std::option::Option<unsafe extern "C" fn(_id:
                                                                              u8,
                                                                          _handle:
                                                                              bgfx_frame_buffer_handle_t)>,
    pub set_view_transform: ::std::option::Option<unsafe extern "C" fn(_id:
                                                                           u8,
                                                                       _view:
                                                                           *const ::std::os::raw::c_void,
                                                                       _proj:
                                                                           *const ::std::os::raw::c_void)>,
    pub set_view_transform_stereo: ::std::option::Option<unsafe extern "C" fn(_id:
                                                                                  u8,
                                                                              _view:
                                                                                  *const ::std::os::raw::c_void,
                                                                              _projL:
                                                                                  *const ::std::os::raw::c_void,
                                                                              _flags:
                                                                                  u8,
                                                                              _projR:
                                                                                  *const ::std::os::raw::c_void)>,
    pub set_view_order: ::std::option::Option<unsafe extern "C" fn(_id: u8,
                                                                   _num: u8,
                                                                   _order:
                                                                       *const ::std::os::raw::c_void)>,
    pub set_marker: ::std::option::Option<unsafe extern "C" fn(_marker:
                                                                   *const ::std::os::raw::c_char)>,
    pub set_state: ::std::option::Option<unsafe extern "C" fn(_state: u64,
                                                              _rgba: u32)>,
    pub set_condition: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                      bgfx_occlusion_query_handle_t,
                                                                  _visible:
                                                                      bool)>,
    pub set_stencil: ::std::option::Option<unsafe extern "C" fn(_fstencil:
                                                                    u32,
                                                                _bstencil:
                                                                    u32)>,
    pub set_scissor: ::std::option::Option<unsafe extern "C" fn(_x: u16,
                                                                _y: u16,
                                                                _width: u16,
                                                                _height: u16)
                                               -> u16>,
    pub set_scissor_cached: ::std::option::Option<unsafe extern "C" fn(_cache:
                                                                           u16)>,
    pub set_transform: ::std::option::Option<unsafe extern "C" fn(_mtx:
                                                                      *const ::std::os::raw::c_void,
                                                                  _num: u16)
                                                 -> u32>,
    pub alloc_transform: ::std::option::Option<unsafe extern "C" fn(_transform:
                                                                        *mut bgfx_transform_t,
                                                                    _num: u16)
                                                   -> u32>,
    pub set_transform_cached: ::std::option::Option<unsafe extern "C" fn(_cache:
                                                                             u32,
                                                                         _num:
                                                                             u16)>,
    pub set_uniform: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                    bgfx_uniform_handle_t,
                                                                _value:
                                                                    *const ::std::os::raw::c_void,
                                                                _num: u16)>,
    pub set_index_buffer: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                         bgfx_index_buffer_handle_t,
                                                                     _firstIndex:
                                                                         u32,
                                                                     _numIndices:
                                                                         u32)>,
    pub set_dynamic_index_buffer: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                                 bgfx_dynamic_index_buffer_handle_t,
                                                                             _firstIndex:
                                                                                 u32,
                                                                             _numIndices:
                                                                                 u32)>,
    pub set_transient_index_buffer: ::std::option::Option<unsafe extern "C" fn(_tib:
                                                                                   *const bgfx_transient_index_buffer_t,
                                                                               _firstIndex:
                                                                                   u32,
                                                                               _numIndices:
                                                                                   u32)>,
    pub set_vertex_buffer: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                          bgfx_vertex_buffer_handle_t,
                                                                      _startVertex:
                                                                          u32,
                                                                      _numVertices:
                                                                          u32)>,
    pub set_dynamic_vertex_buffer: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                                  bgfx_dynamic_vertex_buffer_handle_t,
                                                                              _startVertex:
                                                                                  u32,
                                                                              _numVertices:
                                                                                  u32)>,
    pub set_transient_vertex_buffer: ::std::option::Option<unsafe extern "C" fn(_tvb:
                                                                                    *const bgfx_transient_vertex_buffer_t,
                                                                                _startVertex:
                                                                                    u32,
                                                                                _numVertices:
                                                                                    u32)>,
    pub set_instance_data_buffer: ::std::option::Option<unsafe extern "C" fn(_idb:
                                                                                 *const bgfx_instance_data_buffer_t,
                                                                             _num:
                                                                                 u32)>,
    pub set_instance_data_from_vertex_buffer: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                                             bgfx_vertex_buffer_handle_t,
                                                                                         _startVertex:
                                                                                             u32,
                                                                                         _num:
                                                                                             u32)>,
    pub set_instance_data_from_dynamic_vertex_buffer: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                                                     bgfx_dynamic_vertex_buffer_handle_t,
                                                                                                 _startVertex:
                                                                                                     u32,
                                                                                                 _num:
                                                                                                     u32)>,
    pub set_texture: ::std::option::Option<unsafe extern "C" fn(_stage: u8,
                                                                _sampler:
                                                                    bgfx_uniform_handle_t,
                                                                _handle:
                                                                    bgfx_texture_handle_t,
                                                                _flags: u32)>,
    pub touch: ::std::option::Option<unsafe extern "C" fn(_id: u8) -> u32>,
    pub submit: ::std::option::Option<unsafe extern "C" fn(_id: u8,
                                                           _handle:
                                                               bgfx_program_handle_t,
                                                           _depth: i32,
                                                           _preserveState:
                                                               bool) -> u32>,
    pub submit_occlusion_query: ::std::option::Option<unsafe extern "C" fn(_id:
                                                                               u8,
                                                                           _program:
                                                                               bgfx_program_handle_t,
                                                                           _occlusionQuery:
                                                                               bgfx_occlusion_query_handle_t,
                                                                           _depth:
                                                                               i32,
                                                                           _preserveState:
                                                                               bool)
                                                          -> u32>,
    pub submit_indirect: ::std::option::Option<unsafe extern "C" fn(_id: u8,
                                                                    _handle:
                                                                        bgfx_program_handle_t,
                                                                    _indirectHandle:
                                                                        bgfx_indirect_buffer_handle_t,
                                                                    _start:
                                                                        u16,
                                                                    _num: u16,
                                                                    _depth:
                                                                        i32,
                                                                    _preserveState:
                                                                        bool)
                                                   -> u32>,
    pub set_image: ::std::option::Option<unsafe extern "C" fn(_stage: u8,
                                                              _sampler:
                                                                  bgfx_uniform_handle_t,
                                                              _handle:
                                                                  bgfx_texture_handle_t,
                                                              _mip: u8,
                                                              _access:
                                                                  bgfx_access_t,
                                                              _format:
                                                                  bgfx_texture_format_t)>,
    pub set_compute_index_buffer: ::std::option::Option<unsafe extern "C" fn(_stage:
                                                                                 u8,
                                                                             _handle:
                                                                                 bgfx_index_buffer_handle_t,
                                                                             _access:
                                                                                 bgfx_access_t)>,
    pub set_compute_vertex_buffer: ::std::option::Option<unsafe extern "C" fn(_stage:
                                                                                  u8,
                                                                              _handle:
                                                                                  bgfx_vertex_buffer_handle_t,
                                                                              _access:
                                                                                  bgfx_access_t)>,
    pub set_compute_dynamic_index_buffer: ::std::option::Option<unsafe extern "C" fn(_stage:
                                                                                         u8,
                                                                                     _handle:
                                                                                         bgfx_dynamic_index_buffer_handle_t,
                                                                                     _access:
                                                                                         bgfx_access_t)>,
    pub set_compute_dynamic_vertex_buffer: ::std::option::Option<unsafe extern "C" fn(_stage:
                                                                                          u8,
                                                                                      _handle:
                                                                                          bgfx_dynamic_vertex_buffer_handle_t,
                                                                                      _access:
                                                                                          bgfx_access_t)>,
    pub set_compute_indirect_buffer: ::std::option::Option<unsafe extern "C" fn(_stage:
                                                                                    u8,
                                                                                _handle:
                                                                                    bgfx_indirect_buffer_handle_t,
                                                                                _access:
                                                                                    bgfx_access_t)>,
    pub dispatch: ::std::option::Option<unsafe extern "C" fn(_id: u8,
                                                             _handle:
                                                                 bgfx_program_handle_t,
                                                             _numX: u16,
                                                             _numY: u16,
                                                             _numZ: u16,
                                                             _flags: u8)
                                            -> u32>,
    pub dispatch_indirect: ::std::option::Option<unsafe extern "C" fn(_id: u8,
                                                                      _handle:
                                                                          bgfx_program_handle_t,
                                                                      _indirectHandle:
                                                                          bgfx_indirect_buffer_handle_t,
                                                                      _start:
                                                                          u16,
                                                                      _num:
                                                                          u16,
                                                                      _flags:
                                                                          u8)
                                                     -> u32>,
    pub discard: ::std::option::Option<unsafe extern "C" fn()>,
    pub blit: ::std::option::Option<unsafe extern "C" fn(_id: u8,
                                                         _dst:
                                                             bgfx_texture_handle_t,
                                                         _dstMip: u8,
                                                         _dstX: u16,
                                                         _dstY: u16,
                                                         _dstZ: u16,
                                                         _src:
                                                             bgfx_texture_handle_t,
                                                         _srcMip: u8,
                                                         _srcX: u16,
                                                         _srcY: u16,
                                                         _srcZ: u16,
                                                         _width: u16,
                                                         _height: u16,
                                                         _depth: u16)>,
    pub request_screen_shot: ::std::option::Option<unsafe extern "C" fn(_handle:
                                                                            bgfx_frame_buffer_handle_t,
                                                                        _filePath:
                                                                            *const ::std::os::raw::c_char)>,
}
#[test]
fn bindgen_test_layout_bgfx_interface_vtbl() {
    assert_eq!(::std::mem::size_of::<bgfx_interface_vtbl>() , 1048usize ,
               concat ! ( "Size of: " , stringify ! ( bgfx_interface_vtbl )
               ));
    assert_eq! (::std::mem::align_of::<bgfx_interface_vtbl>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( bgfx_interface_vtbl ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . render_frame as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( render_frame ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_platform_data as * const _ as usize } , 8usize , concat !
                (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_platform_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                get_internal_data as * const _ as usize } , 16usize , concat !
                (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( get_internal_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                override_internal_texture_ptr as * const _ as usize } ,
                24usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( override_internal_texture_ptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                override_internal_texture as * const _ as usize } , 32usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( override_internal_texture ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                vertex_decl_begin as * const _ as usize } , 40usize , concat !
                (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( vertex_decl_begin ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . vertex_decl_add
                as * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( vertex_decl_add ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                vertex_decl_skip as * const _ as usize } , 56usize , concat !
                (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( vertex_decl_skip ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . vertex_decl_end
                as * const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( vertex_decl_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . vertex_pack as
                * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( vertex_pack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . vertex_unpack
                as * const _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( vertex_unpack ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . vertex_convert
                as * const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( vertex_convert ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . weld_vertices
                as * const _ as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( weld_vertices ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                topology_convert as * const _ as usize } , 104usize , concat !
                (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( topology_convert ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                topology_sort_tri_list as * const _ as usize } , 112usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( topology_sort_tri_list ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                get_supported_renderers as * const _ as usize } , 120usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( get_supported_renderers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                get_renderer_name as * const _ as usize } , 128usize , concat
                ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( get_renderer_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . init as * const
                _ as usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( init ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . shutdown as *
                const _ as usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( shutdown ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . reset as *
                const _ as usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( reset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . frame as *
                const _ as usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( frame ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                get_renderer_type as * const _ as usize } , 168usize , concat
                ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( get_renderer_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . get_caps as *
                const _ as usize } , 176usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( get_caps ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . get_hmd as *
                const _ as usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( get_hmd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . get_stats as *
                const _ as usize } , 192usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( get_stats ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . alloc as *
                const _ as usize } , 200usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( alloc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . copy as * const
                _ as usize } , 208usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( copy ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . make_ref as *
                const _ as usize } , 216usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( make_ref ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                make_ref_release as * const _ as usize } , 224usize , concat !
                (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( make_ref_release ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . set_debug as *
                const _ as usize } , 232usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_debug ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . dbg_text_clear
                as * const _ as usize } , 240usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( dbg_text_clear ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . dbg_text_printf
                as * const _ as usize } , 248usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( dbg_text_printf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                dbg_text_vprintf as * const _ as usize } , 256usize , concat !
                (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( dbg_text_vprintf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . dbg_text_image
                as * const _ as usize } , 264usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( dbg_text_image ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_index_buffer as * const _ as usize } , 272usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_index_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                destroy_index_buffer as * const _ as usize } , 280usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( destroy_index_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_vertex_buffer as * const _ as usize } , 288usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_vertex_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                destroy_vertex_buffer as * const _ as usize } , 296usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( destroy_vertex_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_dynamic_index_buffer as * const _ as usize } , 304usize
                , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_dynamic_index_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_dynamic_index_buffer_mem as * const _ as usize } ,
                312usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_dynamic_index_buffer_mem ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                update_dynamic_index_buffer as * const _ as usize } , 320usize
                , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( update_dynamic_index_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                destroy_dynamic_index_buffer as * const _ as usize } ,
                328usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( destroy_dynamic_index_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_dynamic_vertex_buffer as * const _ as usize } ,
                336usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_dynamic_vertex_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_dynamic_vertex_buffer_mem as * const _ as usize } ,
                344usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_dynamic_vertex_buffer_mem ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                update_dynamic_vertex_buffer as * const _ as usize } ,
                352usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( update_dynamic_vertex_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                destroy_dynamic_vertex_buffer as * const _ as usize } ,
                360usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( destroy_dynamic_vertex_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                get_avail_transient_index_buffer as * const _ as usize } ,
                368usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( get_avail_transient_index_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                get_avail_transient_vertex_buffer as * const _ as usize } ,
                376usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( get_avail_transient_vertex_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                get_avail_instance_data_buffer as * const _ as usize } ,
                384usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( get_avail_instance_data_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                alloc_transient_index_buffer as * const _ as usize } ,
                392usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( alloc_transient_index_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                alloc_transient_vertex_buffer as * const _ as usize } ,
                400usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( alloc_transient_vertex_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                alloc_transient_buffers as * const _ as usize } , 408usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( alloc_transient_buffers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                alloc_instance_data_buffer as * const _ as usize } , 416usize
                , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( alloc_instance_data_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_indirect_buffer as * const _ as usize } , 424usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_indirect_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                destroy_indirect_buffer as * const _ as usize } , 432usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( destroy_indirect_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . create_shader
                as * const _ as usize } , 440usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_shader ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                get_shader_uniforms as * const _ as usize } , 448usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( get_shader_uniforms ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . destroy_shader
                as * const _ as usize } , 456usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( destroy_shader ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . create_program
                as * const _ as usize } , 464usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_program ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_compute_program as * const _ as usize } , 472usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_compute_program ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . destroy_program
                as * const _ as usize } , 480usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( destroy_program ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                is_texture_valid as * const _ as usize } , 488usize , concat !
                (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( is_texture_valid ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                calc_texture_size as * const _ as usize } , 496usize , concat
                ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( calc_texture_size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . create_texture
                as * const _ as usize } , 504usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_texture ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_texture_2d as * const _ as usize } , 512usize , concat
                ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_texture_2d ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_texture_2d_scaled as * const _ as usize } , 520usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_texture_2d_scaled ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_texture_3d as * const _ as usize } , 528usize , concat
                ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_texture_3d ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_texture_cube as * const _ as usize } , 536usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_texture_cube ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                update_texture_2d as * const _ as usize } , 544usize , concat
                ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( update_texture_2d ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                update_texture_3d as * const _ as usize } , 552usize , concat
                ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( update_texture_3d ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                update_texture_cube as * const _ as usize } , 560usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( update_texture_cube ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . read_texture as
                * const _ as usize } , 568usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( read_texture ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . destroy_texture
                as * const _ as usize } , 576usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( destroy_texture ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_frame_buffer as * const _ as usize } , 584usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_frame_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_frame_buffer_scaled as * const _ as usize } , 592usize
                , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_frame_buffer_scaled ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_frame_buffer_from_attachment as * const _ as usize } ,
                600usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_frame_buffer_from_attachment ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_frame_buffer_from_nwh as * const _ as usize } ,
                608usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_frame_buffer_from_nwh ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . get_texture as
                * const _ as usize } , 616usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( get_texture ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                destroy_frame_buffer as * const _ as usize } , 624usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( destroy_frame_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . create_uniform
                as * const _ as usize } , 632usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_uniform ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                get_uniform_info as * const _ as usize } , 640usize , concat !
                (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( get_uniform_info ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . destroy_uniform
                as * const _ as usize } , 648usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( destroy_uniform ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                create_occlusion_query as * const _ as usize } , 656usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( create_occlusion_query ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . get_result as *
                const _ as usize } , 664usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( get_result ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                destroy_occlusion_query as * const _ as usize } , 672usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( destroy_occlusion_query ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_palette_color as * const _ as usize } , 680usize , concat
                ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_palette_color ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . set_view_name
                as * const _ as usize } , 688usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_view_name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . set_view_rect
                as * const _ as usize } , 696usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_view_rect ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_view_scissor as * const _ as usize } , 704usize , concat !
                (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_view_scissor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . set_view_clear
                as * const _ as usize } , 712usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_view_clear ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_view_clear_mrt as * const _ as usize } , 720usize , concat
                ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_view_clear_mrt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . set_view_seq as
                * const _ as usize } , 728usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_view_seq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_view_frame_buffer as * const _ as usize } , 736usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_view_frame_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_view_transform as * const _ as usize } , 744usize , concat
                ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_view_transform ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_view_transform_stereo as * const _ as usize } , 752usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_view_transform_stereo ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . set_view_order
                as * const _ as usize } , 760usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_view_order ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . set_marker as *
                const _ as usize } , 768usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_marker ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . set_state as *
                const _ as usize } , 776usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . set_condition
                as * const _ as usize } , 784usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_condition ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . set_stencil as
                * const _ as usize } , 792usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_stencil ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . set_scissor as
                * const _ as usize } , 800usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_scissor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_scissor_cached as * const _ as usize } , 808usize , concat
                ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_scissor_cached ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . set_transform
                as * const _ as usize } , 816usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_transform ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . alloc_transform
                as * const _ as usize } , 824usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( alloc_transform ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_transform_cached as * const _ as usize } , 832usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_transform_cached ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . set_uniform as
                * const _ as usize } , 840usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_uniform ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_index_buffer as * const _ as usize } , 848usize , concat !
                (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_index_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_dynamic_index_buffer as * const _ as usize } , 856usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_dynamic_index_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_transient_index_buffer as * const _ as usize } , 864usize
                , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_transient_index_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_vertex_buffer as * const _ as usize } , 872usize , concat
                ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_vertex_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_dynamic_vertex_buffer as * const _ as usize } , 880usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_dynamic_vertex_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_transient_vertex_buffer as * const _ as usize } , 888usize
                , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_transient_vertex_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_instance_data_buffer as * const _ as usize } , 896usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_instance_data_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_instance_data_from_vertex_buffer as * const _ as usize } ,
                904usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_instance_data_from_vertex_buffer )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_instance_data_from_dynamic_vertex_buffer as * const _ as
                usize } , 912usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! (
                set_instance_data_from_dynamic_vertex_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . set_texture as
                * const _ as usize } , 920usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_texture ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . touch as *
                const _ as usize } , 928usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( touch ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . submit as *
                const _ as usize } , 936usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( submit ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                submit_occlusion_query as * const _ as usize } , 944usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( submit_occlusion_query ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . submit_indirect
                as * const _ as usize } , 952usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( submit_indirect ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . set_image as *
                const _ as usize } , 960usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_image ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_compute_index_buffer as * const _ as usize } , 968usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_compute_index_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_compute_vertex_buffer as * const _ as usize } , 976usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_compute_vertex_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_compute_dynamic_index_buffer as * const _ as usize } ,
                984usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_compute_dynamic_index_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_compute_dynamic_vertex_buffer as * const _ as usize } ,
                992usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_compute_dynamic_vertex_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                set_compute_indirect_buffer as * const _ as usize } ,
                1000usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( set_compute_indirect_buffer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . dispatch as *
                const _ as usize } , 1008usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( dispatch ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                dispatch_indirect as * const _ as usize } , 1016usize , concat
                ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( dispatch_indirect ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . discard as *
                const _ as usize } , 1024usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( discard ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) . blit as * const
                _ as usize } , 1032usize , concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( blit ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const bgfx_interface_vtbl ) ) .
                request_screen_shot as * const _ as usize } , 1040usize ,
                concat ! (
                "Alignment of field: " , stringify ! ( bgfx_interface_vtbl ) ,
                "::" , stringify ! ( request_screen_shot ) ));
}
impl Clone for bgfx_interface_vtbl {
    fn clone(&self) -> Self { *self }
}
pub type bgfx_interface_vtbl_t = bgfx_interface_vtbl;
pub type PFN_BGFX_GET_INTERFACE =
    ::std::option::Option<unsafe extern "C" fn(_version: u32)
                              -> *mut bgfx_interface_vtbl_t>;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __crt_locale_data {
    pub _address: u8,
}
impl Clone for __crt_locale_data {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
impl Clone for __crt_multibyte_data {
    fn clone(&self) -> Self { *self }
}
